/*
  CUP Parser
*/

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import edu.tum.lua.ast.*;

import asttweaks.*;


/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};


parser code {: 
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex) {
  		
      super(lex);
      lexer = lex;
     
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.print(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }
:}; 





 /* Terminals (tokens returned by lexer). */


terminal         ASM; //Assigment =
terminal		 DOT, DDOT;
terminal		 LOCAL, FUNC, END;
terminal  		 DO, WHILE, FOR, IN, REPEAT, UNTIL;
terminal         IF, THEN, ELSE, ELSEIF, RETURN, BREAK;
terminal         NIL, FALSE, TRUE, PARAMS;
terminal         ADD, MUL, SUB, DIV, MOD, POW, CONCAT;
terminal         EQ, LEQ ,NEQ , LE, GR, GEQ, AND, OR; 
terminal         NOT, LENGTH;
terminal 		 LPAREN, RPAREN, LBRACK, RBRACK, LCURL, RCURL;
terminal		 SEMI, COM, WS;
terminal Double NUMBER;
terminal String  ID, TEXT;




 /*NON TERMINALS */

non terminal Block block, optelse ;
non terminal Stat stat;
non terminal StatList statlist;
non terminal LastStat laststat;

non terminal FuncName funcname;
non terminal VarList varlist;
non terminal Var var;
non terminal NameList namelist;
non terminal ExpList explist,args, optasmexplist;
non terminal Exp exp, optforexp;
non terminal PrefixExp prefixexp;
non terminal FunctionCall functioncall;
non terminal FuncBody funcbody;
non terminal ParList parlist;
non terminal TableConstructor tableconstructor;
non terminal FieldList fieldlist;
non terminal Field field;
non terminal fieldsep;
non terminal Integer binop;
non terminal Integer unop;
non terminal optsemi, empty,  optws;



precedence nonassoc LPAREN, RPAREN; 
precedence nonassoc WS, COM ;

precedence left ADD, MUL, SUB, DIV, MOD, POW, CONCAT, EQ, LEQ ,NEQ , LE, GR, GEQ, AND, OR;

/* Grammar */

start with block;
 

block 			::=    statlist:stats laststat:lstat
                 		{:       
                 			   
                 			 System.out.println("Inside block with laststat");    
                 			RESULT = new Block(stats,lstat);  
                 		:}
                 		| statlist:stats 
                 		{:       
                 			System.out.println("Inside block with laststat");     	    
                 			RESULT = new Block(stats,null); 	
                 			  
                 		:}
                 		| laststat:lstat {:
                 		 		RESULT = new Block(null,lstat);  :}
                 		
                 		| 
                 		empty {: 
                 				System.out.println("Inside empty block"); RESULT = new Block(null,null);;
                 				 :}
                 		;

	

statlist		::=		optws stat:s optsemi optws
						{: 	
							System.out.println("Inside single stat"); 			
							RESULT = new StatList(s);
						:}							
						
						|  optws stat:s  optsemi optws statlist:sl 
						{:						
					   		if(sl== null){
					    	System.out.println("Inside recu stat"); 	
					    	sl =new StatList(s);
							RESULT = sl;}
							else{
							System.out.println("Inside recu stat");
							sl.insertElementAt(s,0);
							RESULT = sl;
							}
						:}	
					
							
						;
					
						

prefixexp		::=		var:v
						{:
							RESULT = new PrefixExpVar(v);
						:}
						| functioncall:fc {:
							System.out.println("inside prefixexp");
							RESULT =  new PrefixExpFuncCall(fc);
						:}
						| LPAREN exp:e RPAREN
						{:
							RESULT = new PrefixExpExp(e);
						:}
						;

 
					
stat        	::=    		varlist:vl optws ASM optws explist:el 
						{: 
								System.out.println("Inside stat");
								RESULT = new Asm(vl,el);
						:}
						| functioncall:fc
						{:
						  RESULT = new FuncCallStmt(fc);
						:}
						
						| 	DO optws block:b END 
						{:    
								System.out.println("Inside DO END");
								RESULT = new DoExp(b); 
						:}
						|  	WHILE optws exp:e  optws DO optws block:b END
						{: 		RESULT = new WhileExp(e,b); :}
						|  	REPEAT optws block:b  UNTIL optws exp:e
						{: 		RESULT = new RepeatUntil(b,e); :}
						|  IF optws exp:e optws THEN optws block:b optelse:elseblock  END
						{: 
							RESULT = new IfThenElse(e, b, elseblock);
						:}
						| 	FOR optws ID:Id optws ASM optws exp:e1 optws COM optws exp:e2  optforexp:e3 optws DO optws block:b END
						{: 		
								RESULT = new ForExp(Id,e1,e2,e3,b); 
						:}
						| FOR optws namelist:nl optws IN optws explist:el optws DO optws block:b END
						{: RESULT = new ForIn(nl,el, b); :}
						| FUNC optws funcname:fn optws funcbody:fb  
						{: RESULT = new FunctionDef(fn,fb.getArgs(), fb.getVarArgs(), fb.getBlock()); :} 
		 				| LOCAL optws FUNC optws ID:id optws funcbody:fb
		 				{: RESULT = new LocalFuncDef(id, fb.getArgs(), fb.getVarArgs(), fb.getBlock()); :}
						| LOCAL optws namelist:nl optws optasmexplist:el 
						{: RESULT = new LocalDecl(nl,el); :}
						;
					
laststat		::=		RETURN optws optsemi
						{:    
							System.out.println("Inside laststat");
							RESULT = new LastReturn(null); 
						:}
						|	RETURN optws explist:el optws optsemi	
						{:    
							System.out.println("Inside laststat");
							RESULT = new LastReturn(el); 
						:}
						| BREAK optws optsemi{: RESULT = new LastBreak(); :}	
						; 						

funcname		::=     ID:Id {: RESULT = new FuncNameVar(new Name(Id)); :}
						| ID:id DOT funcname:fn {: RESULT = new FuncNameVarDotFuncName(new Name(id),fn); :}
						| ID:id DDOT ID:id1 {: RESULT = new FuncNameDDotVar(new Name(id),new Name(id1)); :}
						;
						

optelse			::= 	ELSE optws block:b {: RESULT = b; :}						
						| ELSEIF WS exp:e WS THEN optws block:bl optelse:elseblock 
						{: Block tmpbl =new Block(new StatList(new IfThenElse(e,bl,elseblock)),null);
						RESULT = tmpbl; :}
						| empty
						;	
												
optforexp		::=		COM optws exp:e {: RESULT = e; :}				
						| empty {: RESULT = new NumberExp(1.0); :}
						;

varlist			::=     var:v optws
						{: 							
						RESULT= new VarList(v);
						:}
						| var:v optws COM optws varlist:vl
						{: 
						if(vl==null){
						vl = new VarList(v);
						RESULT = vl; }
						else {
						vl.insertElementAt(v,0);
						RESULT = vl; }
						:}								
						;
	
				
explist			::=     exp:e  optws
							{: 
							RESULT= new ExpList(e);
							:}
						| exp:e optws COM  optws explist:el 
							{:
								if(el == null) {
									el = new ExpList(e);
								RESULT = el;} 
								else {
									el.insertElementAt(e,0);
								RESULT = el;}
	
							:}
						
						;
						
optasmexplist   ::=   ASM optws explist:el
					 {: RESULT = el; :}
					 | empty
					 ;	
					   
						
				 
					 		
namelist    	::=    	ID:id  optws
						{: RESULT = new NameList(new Name(id)); 
						System.out.println("Inside Namelist"); :}  
						 | namelist:nl optws COM optws ID:id
						{: 	System.out.println("Inside Namelist COM"); 
							
							nl.append(new Name(id));
							RESULT = nl;
						
						:} 
						
						 						
						;
					
					

var				::=		ID:id
						{:  						
						RESULT =  new Variable(id);						
						:}	
						| prefixexp:pe LBRACK exp:e RBRACK	
						{:  						
						RESULT =  new VarTabIndex(pe,e);						
						:}					
						;

					
exp				::=		NIL
							{: RESULT = new Nil(); :}  
						| FALSE
							{: RESULT = new BooleanExp(false); :}  
						| TRUE
							{: RESULT = new BooleanExp(true); :} 
						| NUMBER:num
							{: 	System.out.println("Inside Number expression");				   
								RESULT = new NumberExp(num); 						
							:} 
						| TEXT:t 
							{: RESULT = new TextExp(t); :}
						| PARAMS 
						   {: RESULT = new Dots(); :}
						
						| prefixexp:prefixexp
							{: System.out.println("Inside prefixexp expression operator");
							RESULT = new PreExp(prefixexp); :}
						| tableconstructor:tc
								{: RESULT = new TableConstructorExp(tc); :} 
						| exp:e1 binop:op optws exp:e2 optws
							{: 
								System.out.println("Inside AND expression operator");
								RESULT = new Binop(e1,op,e2); :}
						| exp:e1 WS binop:op optws exp:e2 optws
							{: 
								System.out.println("Inside AND expression operator");
								RESULT = new Binop(e1,op,e2); :}
						| unop:uop optws exp:e
							{: RESULT = new Unop(uop,e); :}
						| FUNC optws funcbody:fb 
							{: RESULT = new FunctionExp(fb.getArgs(), fb.getVarArgs(), fb.getBlock()); :}
						;	
	
					
	
	
functioncall	::= 	prefixexp:pexp args:ar
						{:
							System.out.println("inside functioncall");
							RESULT = new FuncCall(pexp,ar);
						:}
						| prefixexp:pexp DDOT TEXT:nam args:ar
						{:
							RESULT = new FuncCallSelf(pexp,new Name(nam),ar);
						:} 
						;

				
args			::= 	LPAREN explist:el RPAREN
						{:
							RESULT = el;
						:}
						| LPAREN RPAREN {: RESULT = new ExpList(null); :}
						| tableconstructor:tc {: RESULT = new ExpList(new TableConstructorExp(tc)); :}
						| TEXT:txt {: RESULT = new ExpList(new TextExp(txt)); :} 
						;

funcbody		::= 	LPAREN optws parlist:pl optws RPAREN optws block:bl optws END
						{:
								
								RESULT = new FuncBody(pl,bl);
						:}
						
						;
					

parlist			::=		namelist:nl
						{:
							RESULT = new ParList(nl,false);
						:} 
						|
						namelist:nl optws COM optws PARAMS
						{:
							
							System.out.println("Inside namelist comma params"); 
							RESULT = new ParList(nl,true);
						:}	
								
						
						| PARAMS
						{:
							RESULT = new ParList(new NameList(),true); /* empty namelist */
						:}
						| {:
							RESULT = new ParList(new NameList(), false); /* empty namelist */
						  :}
						  
						;	
	

tableconstructor ::=    LCURL fieldlist:fl RCURL
 						{: RESULT = new TableConstructor(fl); :} 
 						| LCURL RCURL
 							{: RESULT = new TableConstructor(new FieldList()); :}
 						; 

 						
fieldlist		 ::= 	field:f
							{: RESULT = new FieldList(f); :}
						| field:f fieldsep fieldlist:fl
							{: if(fl==null) {
									RESULT = new FieldList(f);
								}
								else
								{
									fl.insertElementAt(f,0);
									RESULT = fl;
								}						
							:}
 						;
 						
 						
field			::=		LBRACK exp:e1 RBRACK ASM exp:e2
						{:
						RESULT = new FieldLRExp(e1,e2);
						:}	
						| ID:ident ASM exp:e
						{:
						RESULT = new FieldNameExp(ident,e);
						:}
						| exp:e
						{:
						RESULT = new FieldExp(e);
						:}
						
						;
						

fieldsep		::=		COM | SEMI						
						;		
binop			::=		ADD
						{: RESULT = Op.ADD; :}
						| SUB
						{: RESULT = Op.SUB; :}
						| MUL
						{: RESULT = Op.MUL; :}
						| DIV
						{: RESULT = Op.DIV; :}
						| MOD
						{: RESULT = Op.MOD; :}
						| POW
						{: RESULT = Op.POW; :}
						| CONCAT
						{: RESULT = Op.CONCAT; :}
						| EQ
						{: RESULT = Op.EQ; :}
						| LEQ
						{: RESULT = Op.LE; :}
						| NEQ
						{: RESULT = Op.NEQ; :}
						| LE
						{: RESULT = Op.LT; :}
						| GR
						{: RESULT = Op.GT; :}
						| GEQ
						{: RESULT = Op.GE; :}
						| AND
						{: RESULT = Op.AND; :}
						| OR
						{: RESULT = Op.OR; :}
						;
						
unop			::=		SUB
						{: RESULT = Op.UNM; :}
						| NOT
						{: RESULT = Op.NOT; :}
						| LENGTH
						{: RESULT = Op.LEN; :}
						;
								

						
optsemi			::= 	SEMI  | empty ;


optws			::= 	 WS   | empty ;
						
empty			::=		;

