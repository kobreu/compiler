
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jul 30 17:07:39 CEST 2013
//----------------------------------------------------

package edu.tum.lua.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import edu.tum.lua.ast.*;
import asttweaks.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jul 30 17:07:39 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\005\004" +
    "\000\002\005\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\005\000\002\004\005\000\002\004\003\000\002" +
    "\004\005\000\002\004\007\000\002\004\006\000\002\004" +
    "\010\000\002\004\014\000\002\004\011\000\002\004\005" +
    "\000\002\004\006\000\002\004\005\000\002\006\004\000" +
    "\002\006\005\000\002\006\004\000\002\007\003\000\002" +
    "\007\005\000\002\007\005\000\002\003\004\000\002\003" +
    "\007\000\002\003\003\000\002\017\004\000\002\017\003" +
    "\000\002\010\003\000\002\010\005\000\002\013\003\000" +
    "\002\013\005\000\002\015\004\000\002\015\003\000\002" +
    "\012\003\000\002\012\005\000\002\011\003\000\002\011" +
    "\006\000\002\011\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\006\000\002\016\004\000\002\016" +
    "\004\000\002\021\004\000\002\021\006\000\002\014\005" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\022\007\000\002\023\003\000\002\023\005\000\002" +
    "\023\003\000\002\023\002\000\002\024\005\000\002\024" +
    "\004\000\002\025\003\000\002\025\005\000\002\026\007" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\032\002\uffa2\007\007\010\020\012\016\013" +
    "\004\014\025\016\027\020\011\024\010\025\021\053\013" +
    "\065\014\001\002\000\034\010\041\026\037\027\047\030" +
    "\034\031\036\034\040\051\033\052\045\053\013\057\032" +
    "\064\042\065\014\066\051\001\002\000\014\002\ufffe\011" +
    "\ufffe\017\ufffe\022\ufffe\023\ufffe\001\002\000\020\002\uffff" +
    "\011\uffff\017\uffff\022\uffff\023\uffff\024\010\025\021\001" +
    "\002\000\006\010\247\065\124\001\002\000\050\002\uffa2" +
    "\010\041\011\uffa2\017\uffa2\022\uffa2\023\uffa2\026\037\027" +
    "\047\030\034\031\036\034\040\051\033\052\045\053\013" +
    "\057\032\061\206\064\042\065\014\066\051\001\002\000" +
    "\034\010\041\026\037\027\047\030\034\031\036\034\040" +
    "\051\033\052\045\053\013\057\032\064\042\065\014\066" +
    "\051\001\002\000\004\002\226\001\002\000\034\010\041" +
    "\026\037\027\047\030\034\031\036\034\040\051\033\052" +
    "\045\053\013\057\032\064\042\065\014\066\051\001\002" +
    "\000\132\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065\uffd9\066\uffd9\001" +
    "\002\000\014\002\ufffd\011\ufffd\017\ufffd\022\ufffd\023\ufffd" +
    "\001\002\000\032\007\007\010\020\011\uffa2\012\016\013" +
    "\004\014\025\016\027\020\011\024\010\025\021\053\013" +
    "\065\014\001\002\000\056\002\ufff6\005\ufff9\006\ufff9\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\053" +
    "\ufff9\055\ufff9\057\ufff9\061\ufff6\065\ufff6\066\ufff9\001\002" +
    "\000\004\065\214\001\002\000\016\002\uffa2\011\uffa2\017" +
    "\uffa2\022\uffa2\023\uffa2\061\206\001\002\000\016\005\061" +
    "\006\055\053\057\055\056\057\032\066\054\001\002\000" +
    "\044\002\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\053\uffa2\061\206\065\uffa2\001\002\000\022" +
    "\004\uffe1\005\ufffa\006\ufffa\053\ufffa\055\ufffa\057\ufffa\062" +
    "\204\066\ufffa\001\002\000\004\065\161\001\002\000\004" +
    "\004\157\001\002\000\032\007\007\010\020\012\016\013" +
    "\004\014\025\016\027\017\uffa2\020\011\024\010\025\021" +
    "\053\013\065\014\001\002\000\004\017\031\001\002\000" +
    "\034\010\041\026\037\027\047\030\034\031\036\034\040" +
    "\051\033\052\045\053\013\057\032\064\042\065\014\066" +
    "\051\001\002\000\040\010\041\026\037\027\047\030\034" +
    "\031\036\034\040\051\033\052\045\053\013\055\137\057" +
    "\032\060\143\064\042\065\141\066\051\001\002\000\034" +
    "\010\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\034\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\057\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\001\002\000\116\002\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\053" +
    "\uffd4\054\uffd4\056\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\065\uffd4\001\002\000\104\002\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\032\102\033\106\034" +
    "\100\035\101\036\067\037\072\040\074\041\103\042\104" +
    "\043\107\044\076\045\077\046\066\047\070\050\071\053" +
    "\ufff3\061\ufff3\063\105\065\ufff3\001\002\000\116\002\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1\056\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\001\002\000\116" +
    "\002\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\053\uffd6\054\uffd6\056" +
    "\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\065\uffd6\001\002" +
    "\000\034\010\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\034" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\057\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\001\002\000\004\053\122\001\002\000\116\002" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\053\uffd3\054\uffd3\056\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3\001\002\000" +
    "\130\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\063\ufff9\065\ufff9\066\ufff9\001\002\000\034" +
    "\010\041\026\037\027\047\030\034\031\036\034\040\051" +
    "\033\052\045\053\013\057\032\064\042\065\014\066\051" +
    "\001\002\000\034\010\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\034\uffa5\051\uffa5\052\uffa5\053\uffa5\057\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\001\002\000\116\002\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\053\uffcf\054\uffcf\056\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\065\uffcf\001\002\000\116\002\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\053\uffd5\054\uffd5\056\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\065\uffd5\001\002\000\130\002" +
    "\uffd0\005\061\006\055\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\053\057" +
    "\054\uffd0\055\056\056\uffd0\057\032\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\066\054\001\002\000\116\002\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\053\uffd2\054\uffd2\056\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\001\002\000\130" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\065\ufffa\066\ufffa\001\002\000\130\002" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\065\uffca\066\uffca\001\002\000\130\002\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\065\uffc5\066\uffc5\001\002\000\004\065\117\001" +
    "\002\000\034\010\041\026\037\027\047\030\034\031\036" +
    "\034\040\051\033\052\045\053\013\057\032\064\042\065" +
    "\014\066\051\001\002\000\036\010\041\026\037\027\047" +
    "\030\034\031\036\034\040\051\033\052\045\053\013\054" +
    "\063\057\032\064\042\065\014\066\051\001\002\000\130" +
    "\002\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\065\uffc6\066\uffc6\001\002\000\004\065" +
    "\062\001\002\000\132\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7" +
    "\066\uffd7\001\002\000\130\002\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\066" +
    "\uffc7\001\002\000\004\054\114\001\002\000\110\002\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\032\102\033\106\034\100\035\101\036\067\037\072\040" +
    "\074\041\103\042\104\043\107\044\076\045\077\046\066" +
    "\047\070\050\071\053\uffdf\054\uffdf\061\uffdf\062\073\063" +
    "\105\065\uffdf\001\002\000\034\010\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\034\uffaa\051\uffaa\052\uffaa\053\uffaa\057" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\001\002\000\034\010\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\034\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\057\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002" +
    "\000\034\010\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\034" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\057\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\001\002\000\034\010\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\034\uffa8\051\uffa8\052\uffa8\053\uffa8\057\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\001\002\000\034\010\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\057\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000" +
    "\034\010\041\026\037\027\047\030\034\031\036\034\040" +
    "\051\033\052\045\053\013\057\032\064\042\065\014\066" +
    "\051\001\002\000\034\010\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\034\uffb0\051\uffb0\052\uffb0\053\uffb0\057\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\001\002\000\034\010\041\026\037" +
    "\027\047\030\034\031\036\034\040\051\033\052\045\053" +
    "\013\057\032\064\042\065\014\066\051\001\002\000\034" +
    "\010\uffac\026\uffac\027\uffac\030\uffac\031\uffac\034\uffac\051" +
    "\uffac\052\uffac\053\uffac\057\uffac\064\uffac\065\uffac\066\uffac" +
    "\001\002\000\034\010\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\034\uffab\051\uffab\052\uffab\053\uffab\057\uffab\064\uffab" +
    "\065\uffab\066\uffab\001\002\000\034\010\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\034\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\057\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\034\010" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\057\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\034\010\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\034\uffb6\051\uffb6\052\uffb6\053\uffb6\057\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\001\002\000\034\010\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\034\uffaf\051\uffaf\052\uffaf\053\uffaf\057" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\034\010\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\034\uffae\051\uffae\052" +
    "\uffae\053\uffae\057\uffae\064\uffae\065\uffae\066\uffae\001\002" +
    "\000\040\032\102\033\106\034\100\035\101\036\067\037" +
    "\072\040\074\041\103\042\104\043\107\044\076\045\077" +
    "\046\066\047\070\050\071\001\002\000\034\010\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\057\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000" +
    "\034\010\uffad\026\uffad\027\uffad\030\uffad\031\uffad\034\uffad" +
    "\051\uffad\052\uffad\053\uffad\057\uffad\064\uffad\065\uffad\066" +
    "\uffad\001\002\000\034\010\041\026\037\027\047\030\034" +
    "\031\036\034\040\051\033\052\045\053\013\057\032\064" +
    "\042\065\014\066\051\001\002\000\114\002\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\032\102\033\106\034\100\035\101\036\067\037\072\040" +
    "\074\041\103\042\104\043\107\044\076\045\077\046\066" +
    "\047\070\050\071\053\uffcd\054\uffcd\056\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\065\uffcd\001\002\000\116\002\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\032\102\033\106\034\100\035\101\036\067\037\072\040" +
    "\074\041\103\042\104\043\107\044\076\045\077\046\066" +
    "\047\070\050\071\053\uffce\054\uffce\056\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\105\065\uffce\001\002\000\046\002\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\016" +
    "\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\053\uffde\054\uffde\061\uffde\065\uffde\001\002\000\130\002" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\065\uffc8\066\uffc8\001\002\000\044\032\102" +
    "\033\106\034\100\035\101\036\067\037\072\040\074\041" +
    "\103\042\104\043\107\044\076\045\077\046\066\047\070" +
    "\050\071\056\116\063\105\001\002\000\132\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\065\uffd8\066\uffd8\001\002\000\010\053\057" +
    "\057\032\066\054\001\002\000\130\002\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\116\002\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\032\102" +
    "\033\106\034\100\035\101\036\067\037\072\040\074\041" +
    "\103\042\104\043\107\044\076\045\077\046\066\047\070" +
    "\050\071\053\uffcc\054\uffcc\056\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\105\065\uffcc\001\002\000\010\031\126\054\uffc0" +
    "\065\124\001\002\000\116\002\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\053\uffcb\054\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\065\uffcb\001\002\000\052\002\uffdb\004\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\053" +
    "\uffdb\054\uffdb\061\uffdb\062\uffdb\065\uffdb\001\002\000\006" +
    "\054\uffc3\062\133\001\002\000\004\054\uffc1\001\002\000" +
    "\004\054\130\001\002\000\032\007\007\010\020\011\uffa2" +
    "\012\016\013\004\014\025\016\027\020\011\024\010\025" +
    "\021\053\013\065\014\001\002\000\004\011\132\001\002" +
    "\000\116\002\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\053\uffc4\054" +
    "\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\065\uffc4" +
    "\001\002\000\006\031\135\065\134\001\002\000\054\002" +
    "\uffda\004\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\053\uffda\054\uffda\061\uffda\062\uffda" +
    "\065\uffda\001\002\000\004\054\uffc2\001\002\000\010\060" +
    "\uffbd\061\154\062\155\001\002\000\034\010\041\026\037" +
    "\027\047\030\034\031\036\034\040\051\033\052\045\053" +
    "\013\057\032\064\042\065\014\066\051\001\002\000\050" +
    "\032\102\033\106\034\100\035\101\036\067\037\072\040" +
    "\074\041\103\042\104\043\107\044\076\045\077\046\066" +
    "\047\070\050\071\060\uffb9\061\uffb9\062\uffb9\063\105\001" +
    "\002\000\066\004\145\005\uffd9\006\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\053\uffd9\055\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\066\uffd9\001\002\000\004\060\144\001\002\000\130" +
    "\002\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\065\uffbe\066\uffbe\001\002\000\130\002" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\065\uffbf\066\uffbf\001\002\000\034\010\041" +
    "\026\037\027\047\030\034\031\036\034\040\051\033\052" +
    "\045\053\013\057\032\064\042\065\014\066\051\001\002" +
    "\000\050\032\102\033\106\034\100\035\101\036\067\037" +
    "\072\040\074\041\103\042\104\043\107\044\076\045\077" +
    "\046\066\047\070\050\071\060\uffba\061\uffba\062\uffba\063" +
    "\105\001\002\000\044\032\102\033\106\034\100\035\101" +
    "\036\067\037\072\040\074\041\103\042\104\043\107\044" +
    "\076\045\077\046\066\047\070\050\071\056\150\063\105" +
    "\001\002\000\004\004\151\001\002\000\034\010\041\026" +
    "\037\027\047\030\034\031\036\034\040\051\033\052\045" +
    "\053\013\057\032\064\042\065\014\066\051\001\002\000" +
    "\050\032\102\033\106\034\100\035\101\036\067\037\072" +
    "\040\074\041\103\042\104\043\107\044\076\045\077\046" +
    "\066\047\070\050\071\060\uffbb\061\uffbb\062\uffbb\063\105" +
    "\001\002\000\036\010\041\026\037\027\047\030\034\031" +
    "\036\034\040\051\033\052\045\053\013\055\137\057\032" +
    "\064\042\065\141\066\051\001\002\000\036\010\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\034\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\055\uffb7\057\uffb7\064\uffb7\065\uffb7\066\uffb7\001" +
    "\002\000\036\010\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\034\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\057\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\001\002\000\004\060\uffbc\001\002" +
    "\000\034\010\041\026\037\027\047\030\034\031\036\034" +
    "\040\051\033\052\045\053\013\057\032\064\042\065\014" +
    "\066\051\001\002\000\044\002\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\053\ufff7\061\ufff7\065" +
    "\ufff7\001\002\000\010\004\171\015\uffdb\062\uffdb\001\002" +
    "\000\006\015\163\062\164\001\002\000\034\010\041\026" +
    "\037\027\047\030\034\031\036\034\040\051\033\052\045" +
    "\053\013\057\032\064\042\065\014\066\051\001\002\000" +
    "\004\065\134\001\002\000\004\012\166\001\002\000\032" +
    "\007\007\010\020\011\uffa2\012\016\013\004\014\025\016" +
    "\027\020\011\024\010\025\021\053\013\065\014\001\002" +
    "\000\004\011\170\001\002\000\044\002\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\053\ufff0\061" +
    "\ufff0\065\ufff0\001\002\000\034\010\041\026\037\027\047" +
    "\030\034\031\036\034\040\051\033\052\045\053\013\057" +
    "\032\064\042\065\014\066\051\001\002\000\044\032\102" +
    "\033\106\034\100\035\101\036\067\037\072\040\074\041" +
    "\103\042\104\043\107\044\076\045\077\046\066\047\070" +
    "\050\071\062\173\063\105\001\002\000\034\010\041\026" +
    "\037\027\047\030\034\031\036\034\040\051\033\052\045" +
    "\053\013\057\032\064\042\065\014\066\051\001\002\000" +
    "\046\012\uffa2\032\102\033\106\034\100\035\101\036\067" +
    "\037\072\040\074\041\103\042\104\043\107\044\076\045" +
    "\077\046\066\047\070\050\071\062\176\063\105\001\002" +
    "\000\004\012\201\001\002\000\034\010\041\026\037\027" +
    "\047\030\034\031\036\034\040\051\033\052\045\053\013" +
    "\057\032\064\042\065\014\066\051\001\002\000\004\012" +
    "\uffe2\001\002\000\044\012\uffe3\032\102\033\106\034\100" +
    "\035\101\036\067\037\072\040\074\041\103\042\104\043" +
    "\107\044\076\045\077\046\066\047\070\050\071\063\105" +
    "\001\002\000\032\007\007\010\020\011\uffa2\012\016\013" +
    "\004\014\025\016\027\020\011\024\010\025\021\053\013" +
    "\065\014\001\002\000\004\011\203\001\002\000\044\002" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\053\ufff1\061\ufff1\065\ufff1\001\002\000\006\053\013" +
    "\065\014\001\002\000\004\004\uffe0\001\002\000\042\002" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\053\uffa4\065\uffa4\001\002\000\042\002\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\053\uffa3" +
    "\065\uffa3\001\002\000\042\002\ufffc\007\007\010\020\011" +
    "\ufffc\012\016\013\004\014\025\016\027\017\ufffc\020\011" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\053\013\065\014\001" +
    "\002\000\020\002\ufffb\011\ufffb\017\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\001\002\000\014\002\uffea\011\uffea\017" +
    "\uffea\022\uffea\023\uffea\001\002\000\004\053\122\001\002" +
    "\000\010\005\216\006\215\053\uffe9\001\002\000\004\065" +
    "\220\001\002\000\004\065\214\001\002\000\004\053\uffe8" +
    "\001\002\000\004\053\uffe7\001\002\000\044\002\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\053" +
    "\uffef\061\uffef\065\uffef\001\002\000\004\011\223\001\002" +
    "\000\044\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\053\ufff5\061\ufff5\065\ufff5\001\002\000" +
    "\044\032\102\033\106\034\100\035\101\036\067\037\072" +
    "\040\074\041\103\042\104\043\107\044\076\045\077\046" +
    "\066\047\070\050\071\054\225\063\105\001\002\000\130" +
    "\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\065\ufff8\066\ufff8\001\002\000\004\002" +
    "\001\001\002\000\044\021\230\032\102\033\106\034\100" +
    "\035\101\036\067\037\072\040\074\041\103\042\104\043" +
    "\107\044\076\045\077\046\066\047\070\050\071\063\105" +
    "\001\002\000\036\007\007\010\020\011\uffa2\012\016\013" +
    "\004\014\025\016\027\020\011\022\uffa2\023\uffa2\024\010" +
    "\025\021\053\013\065\014\001\002\000\010\011\uffa2\022" +
    "\233\023\232\001\002\000\034\010\041\026\037\027\047" +
    "\030\034\031\036\034\040\051\033\052\045\053\013\057" +
    "\032\064\042\065\014\066\051\001\002\000\032\007\007" +
    "\010\020\011\uffa2\012\016\013\004\014\025\016\027\020" +
    "\011\024\010\025\021\053\013\065\014\001\002\000\004" +
    "\011\uffe4\001\002\000\004\011\236\001\002\000\044\002" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\053\ufff2\061\ufff2\065\ufff2\001\002\000\004\011\uffe6" +
    "\001\002\000\044\021\241\032\102\033\106\034\100\035" +
    "\101\036\067\037\072\040\074\041\103\042\104\043\107" +
    "\044\076\045\077\046\066\047\070\050\071\063\105\001" +
    "\002\000\036\007\007\010\020\011\uffa2\012\016\013\004" +
    "\014\025\016\027\020\011\022\uffa2\023\uffa2\024\010\025" +
    "\021\053\013\065\014\001\002\000\010\011\uffa2\022\233" +
    "\023\232\001\002\000\004\011\uffe5\001\002\000\014\002" +
    "\uffec\011\uffec\017\uffec\022\uffec\023\uffec\001\002\000\016" +
    "\002\uffa2\011\uffa2\017\uffa2\022\uffa2\023\uffa2\061\206\001" +
    "\002\000\014\002\uffeb\011\uffeb\017\uffeb\022\uffeb\023\uffeb" +
    "\001\002\000\004\065\255\001\002\000\050\002\uffa2\004" +
    "\252\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\053\uffa2\061\uffa2\062\164\065\uffa2\001\002\000\044" +
    "\002\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\053\uffed\061\uffed\065\uffed\001\002\000\034\010" +
    "\041\026\037\027\047\030\034\031\036\034\040\051\033" +
    "\052\045\053\013\057\032\064\042\065\014\066\051\001" +
    "\002\000\044\002\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\053\uffdc\061\uffdc\065\uffdc\001\002" +
    "\000\044\002\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\053\uffdd\061\uffdd\065\uffdd\001\002\000" +
    "\004\053\122\001\002\000\044\002\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\016\uffee\017\uffee\020" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\053\uffee\061\uffee" +
    "\065\uffee\001\002\000\014\002\000\011\000\017\000\022" +
    "\000\023\000\001\002\000\044\012\261\032\102\033\106" +
    "\034\100\035\101\036\067\037\072\040\074\041\103\042" +
    "\104\043\107\044\076\045\077\046\066\047\070\050\071" +
    "\063\105\001\002\000\032\007\007\010\020\011\uffa2\012" +
    "\016\013\004\014\025\016\027\020\011\024\010\025\021" +
    "\053\013\065\014\001\002\000\004\011\263\001\002\000" +
    "\044\002\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\053\ufff4\061\ufff4\065\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\024\002\011\004\022\005\005\006\004\010" +
    "\025\011\023\020\021\021\016\033\014\001\001\000\016" +
    "\011\051\016\257\020\047\021\042\024\045\031\043\001" +
    "\001\000\002\001\001\000\004\006\256\001\001\000\004" +
    "\012\247\001\001\000\024\011\051\013\244\016\064\020" +
    "\047\021\042\024\045\031\043\032\243\033\206\001\001" +
    "\000\016\011\051\016\226\020\047\021\042\024\045\031" +
    "\043\001\001\000\002\001\001\000\016\011\051\016\223" +
    "\020\047\021\042\024\045\031\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\221\004\022\005\005" +
    "\006\004\010\025\011\023\020\021\021\016\033\014\001" +
    "\001\000\002\001\001\000\004\007\212\001\001\000\006" +
    "\032\211\033\206\001\001\000\006\014\052\024\057\001" +
    "\001\000\006\032\207\033\206\001\001\000\002\001\001" +
    "\000\004\012\161\001\001\000\002\001\001\000\024\002" +
    "\027\004\022\005\005\006\004\010\025\011\023\020\021" +
    "\021\016\033\014\001\001\000\002\001\001\000\016\011" +
    "\051\016\034\020\047\021\042\024\045\031\043\001\001" +
    "\000\022\011\051\016\137\020\047\021\042\024\045\025" +
    "\141\026\135\031\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\051\016" +
    "\120\020\047\021\042\024\045\031\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\052\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\051\016\114\020\047\021\042\024\045\031\043" +
    "\001\001\000\020\011\051\013\063\016\064\020\047\021" +
    "\042\024\045\031\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\051\013\112\016\064\020\047\021\042" +
    "\024\045\031\043\001\001\000\002\001\001\000\016\011" +
    "\051\016\111\020\047\021\042\024\045\031\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\051\016\110\020\047\021\042" +
    "\024\045\031\043\001\001\000\004\030\074\001\001\000" +
    "\004\030\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\074\001\001\000\002\001\001\000\006\014" +
    "\117\024\057\001\001\000\002\001\001\000\004\030\074" +
    "\001\001\000\006\012\124\023\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\130\004\022\005\005\006" +
    "\004\010\025\011\023\020\021\021\016\033\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\152\001\001" +
    "\000\016\011\051\016\146\020\047\021\042\024\045\031" +
    "\043\001\001\000\004\030\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\051\016\145\020\047\021\042\024\045\031\043" +
    "\001\001\000\004\030\074\001\001\000\004\030\074\001" +
    "\001\000\002\001\001\000\016\011\051\016\151\020\047" +
    "\021\042\024\045\031\043\001\001\000\004\030\074\001" +
    "\001\000\022\011\051\016\137\020\047\021\042\024\045" +
    "\025\155\026\135\031\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\051\013\157" +
    "\016\064\020\047\021\042\024\045\031\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\051\013\164\016\064\020\047\021\042\024\045\031" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\166\004\022\005\005\006\004\010\025\011\023\020" +
    "\021\021\016\033\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\051\016\171\020\047\021\042\024" +
    "\045\031\043\001\001\000\004\030\074\001\001\000\016" +
    "\011\051\016\173\020\047\021\042\024\045\031\043\001" +
    "\001\000\010\017\174\030\074\033\176\001\001\000\002" +
    "\001\001\000\016\011\051\016\177\020\047\021\042\024" +
    "\045\031\043\001\001\000\002\001\001\000\004\030\074" +
    "\001\001\000\024\002\201\004\022\005\005\006\004\010" +
    "\025\011\023\020\021\021\016\033\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\204\011\023\020" +
    "\021\021\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\022\005\210\010\025\011" +
    "\023\020\021\021\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\074\001\001\000\024\002" +
    "\230\004\022\005\005\006\004\010\025\011\023\020\021" +
    "\021\016\033\014\001\001\000\006\003\234\033\233\001" +
    "\001\000\016\011\051\016\237\020\047\021\042\024\045" +
    "\031\043\001\001\000\024\002\236\004\022\005\005\006" +
    "\004\010\025\011\023\020\021\021\016\033\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\074\001\001\000\024\002\241" +
    "\004\022\005\005\006\004\010\025\011\023\020\021\021" +
    "\016\033\014\001\001\000\006\003\242\033\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\245\033" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\250\033\252\001\001\000\002\001\001\000\020\011" +
    "\051\013\253\016\064\020\047\021\042\024\045\031\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\074\001\001\000\024\002\261\004\022\005\005\006" +
    "\004\010\025\011\023\020\021\021\016\033\014\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex) {
  		
      super(lex);
      lexer = lex;
     
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.print(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // optsemi ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // optsemi ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unop ::= LENGTH 
            {
              Integer RESULT =null;
		 RESULT = Op.LEN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unop ::= NOT 
            {
              Integer RESULT =null;
		 RESULT = Op.NOT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Op.UNM; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= OR 
            {
              Integer RESULT =null;
		 RESULT = Op.OR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= AND 
            {
              Integer RESULT =null;
		 RESULT = Op.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop ::= GR 
            {
              Integer RESULT =null;
		 RESULT = Op.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binop ::= LE 
            {
              Integer RESULT =null;
		 RESULT = Op.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.NEQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = Op.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binop ::= CONCAT 
            {
              Integer RESULT =null;
		 RESULT = Op.CONCAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binop ::= POW 
            {
              Integer RESULT =null;
		 RESULT = Op.POW; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Op.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Op.DIV; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Op.MUL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Op.SUB; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = Op.ADD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fieldsep ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fieldsep ::= COM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // field ::= exp 
            {
              Field RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldExp(e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // field ::= ID ASM exp 
            {
              Field RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldNameExp(ident,e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // field ::= LBRACK exp RBRACK ASM exp 
            {
              Field RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldLRExp(e1,e2);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fieldlist ::= field fieldsep fieldlist 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fl==null) {
									RESULT = new FieldList(f);
								}
								else
								{
									fl.insertElementAt(f,0);
									RESULT = fl;
								}						
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fieldlist ::= field 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldList(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tableconstructor ::= LCURL RCURL 
            {
              TableConstructor RESULT =null;
		 RESULT = new TableConstructor(new FieldList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tableconstructor ::= LCURL fieldlist RCURL 
            {
              TableConstructor RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TableConstructor(fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parlist ::= 
            {
              ParList RESULT =null;
		
							RESULT = new ParList(new NameList(), false); /* empty namelist */
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parlist ::= PARAMS 
            {
              ParList RESULT =null;
		
							RESULT = new ParList(new NameList(),true); /* empty namelist */
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parlist ::= namelist COM PARAMS 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
							
							System.out.println("Inside namelist comma params"); 
							RESULT = new ParList(nl,true);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parlist ::= namelist 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new ParList(nl,false);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              FuncBody RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParList pl = (ParList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
								
								RESULT = new FuncBody(pl,bl);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= TEXT 
            {
              ExpList RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(new TextExp(txt)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= tableconstructor 
            {
              ExpList RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(new TableConstructorExp(tc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args ::= LPAREN RPAREN 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= LPAREN explist RPAREN 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							RESULT = el;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // functioncall ::= prefixexp DDOT ID args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new FuncCallSelf(pexp,id,ar);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // functioncall ::= prefixexp args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside functioncall");
							RESULT = new FuncCall(pexp,ar);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= FUNC funcbody 
            {
              Exp RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionExp(fb.getArgs(), fb.getVarArgs(), fb.getBlock()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= unop exp 
            {
              Exp RESULT =null;
		int uopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer uop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Unop(uop,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp WS binop exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
								System.out.println("Inside AND expression operator");
								RESULT = new Binop(e1,op,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp binop exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
								System.out.println("Inside AND expression operator");
								RESULT = new Binop(e1,op,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= tableconstructor 
            {
              Exp RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TableConstructorExp(tc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= prefixexp 
            {
              Exp RESULT =null;
		int prefixexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prefixexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrefixExp prefixexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Inside prefixexp expression operator");
							RESULT = new PreExp(prefixexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= PARAMS 
            {
              Exp RESULT =null;
		 RESULT = new Dots(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= TEXT 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TextExp(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= NUMBER 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	System.out.println("Inside Number expression");				   
								RESULT = new NumberExp(num); 						
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new BooleanExp(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new BooleanExp(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new Nil(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var ::= prefixexp DOT ID 
            {
              Var RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("DOTvar");
							TextExp textExp = new TextExp(id);
							RESULT = new VarTabIndex(pe, textExp);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var ::= prefixexp LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  						
						RESULT =  new VarTabIndex(pe,e);						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  			
						System.out.println("Var: ID");			
						RESULT =  new Variable(id);						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // namelist ::= namelist COM ID 
            {
              NameList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	System.out.println("Inside Namelist COM"); 
							
							nl.append(new Name(id));
							RESULT = nl;
						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // namelist ::= ID 
            {
              NameList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameList(new Name(id)); 
						System.out.println("Inside Namelist"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // optasmexplist ::= empty 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasmexplist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // optasmexplist ::= ASM explist 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasmexplist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // explist ::= exp COM explist 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if(el == null) {
									el = new ExpList(e);
								RESULT = el;} 
								else {
									el.insertElementAt(e,0);
								RESULT = el;}
	
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // explist ::= exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							RESULT= new ExpList(e);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varlist ::= var COM varlist 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						if(vl==null){
						vl = new VarList(v);
						RESULT = vl; }
						else {
						vl.insertElementAt(v,0);
						RESULT = vl; }
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varlist ::= var 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 							
						RESULT= new VarList(v);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optforexp ::= empty 
            {
              Exp RESULT =null;
		 RESULT = new NumberExp(1.0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optforexp ::= COM exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // optelse ::= empty 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optelse ::= ELSEIF exp THEN block optelse 
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elseblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block elseblock = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Block tmpbl =new Block(new StatList(new IfThenElse(e,bl,elseblock)),null);
						RESULT = tmpbl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optelse ::= ELSE block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcname ::= ID DDOT ID 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncNameDDotVar(new Name(id),new Name(id1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcname ::= ID DOT funcname 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncName fn = (FuncName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncNameVarDotFuncName(new Name(id),fn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcname ::= ID 
            {
              FuncName RESULT =null;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncNameVar(new Name(Id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // laststat ::= BREAK optsemi 
            {
              LastStat RESULT =null;
		 RESULT = new LastBreak(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // laststat ::= RETURN explist optsemi 
            {
              LastStat RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    
							System.out.println("Inside laststat");
							RESULT = new LastReturn(el); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // laststat ::= RETURN optsemi 
            {
              LastStat RESULT =null;
		    
							System.out.println("Inside laststat");
							RESULT = new LastReturn(null); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL namelist optasmexplist 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LocalDecl(nl,el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL FUNC ID funcbody 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LocalFuncDef(id, fb.getArgs(), fb.getVarArgs(), fb.getBlock()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FUNC funcname funcbody 
            {
              Stat RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncName fn = (FuncName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							VarList vl = SyntacticSugar.funcNameToVarList(fn);
							ExpList args = SyntacticSugar.methodDefinitionToExpression(fn, fb);
							
							Asm asm = new Asm(vl, args);
						
							RESULT = asm;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR namelist IN explist DO block END 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForIn(nl,el, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR ID ASM exp COM exp optforexp DO block END 
            {
              Stat RESULT =null;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		
								RESULT = new ForExp(Id,e1,e2,e3,b); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= IF exp THEN block optelse END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block elseblock = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
							RESULT = new IfThenElse(e, b, elseblock);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= REPEAT block UNTIL exp 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 		RESULT = new RepeatUntil(b,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= WHILE exp DO block END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		RESULT = new WhileExp(e,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= DO block END 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    
								System.out.println("Inside DO END");
								RESULT = new DoExp(b); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= functioncall 
            {
              Stat RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						  RESULT = new FuncCallStmt(fc);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= varlist ASM explist 
            {
              Stat RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
								System.out.println("Inside stat");
								RESULT = new Asm(vl,el);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prefixexp ::= LPAREN exp RPAREN 
            {
              PrefixExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							RESULT = new PrefixExpExp(e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prefixexp ::= functioncall 
            {
              PrefixExp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside prefixexp");
							RESULT =  new PrefixExpFuncCall(fc);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prefixexp ::= var 
            {
              PrefixExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside prefixexp var");
							RESULT = new PrefixExpVar(v);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statlist ::= stat optsemi statlist 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
								
					   		if(sl== null){
					    	System.out.println("Inside recu stat"); 	
					    	sl =new StatList(s);
							RESULT = sl;}
							else{
							System.out.println("Inside recu stat");
							sl.insertElementAt(s,0);
							RESULT = sl;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statlist ::= stat optsemi 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	
							System.out.println("Inside single stat"); 			
							RESULT = new StatList(s);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= empty 
            {
              Block RESULT =null;
		 
                 				System.out.println("Inside empty block"); RESULT = new Block(null,null);;
                 				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= laststat 
            {
              Block RESULT =null;
		int lstatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LastStat lstat = (LastStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 		 		RESULT = new Block(null,lstat);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= statlist 
            {
              Block RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList stats = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		       
                 			System.out.println("Inside block with laststat");     	    
                 			RESULT = new Block(stats,null); 	
                 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // block ::= statlist laststat 
            {
              Block RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList stats = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LastStat lstat = (LastStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		       
                 			System.out.println("Inside block with laststat");    
                 			RESULT = new Block(stats,lstat); 
                 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

