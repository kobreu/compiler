
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 26 09:18:28 CEST 2013
//----------------------------------------------------

package edu.tum.lua.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import edu.tum.lua.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 26 09:18:28 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\006\005\000\002\006\006\000\002\007\004" +
    "\000\002\007\003\000\002\007\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\006\000\002\005\012\000\002" +
    "\005\010\000\002\005\013\000\002\005\023\000\002\005" +
    "\015\000\002\005\005\000\002\005\007\000\002\005\006" +
    "\000\002\010\003\000\002\010\005\000\002\010\004\000" +
    "\002\004\005\000\002\004\003\000\002\020\005\000\002" +
    "\020\003\000\002\012\003\000\002\012\005\000\002\015" +
    "\003\000\002\015\005\000\002\014\004\000\002\013\003" +
    "\000\002\013\006\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\004\000\002\017\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\004\000\002\022\006\000\002\016\005\000" +
    "\002\016\004\000\002\016\003\000\002\016\003\000\002" +
    "\023\005\000\002\024\007\000\002\025\003\000\002\025" +
    "\005\000\002\025\003\000\002\025\002\000\002\026\005" +
    "\000\002\027\002\000\002\027\003\000\002\027\005\000" +
    "\002\030\007\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\037\003\000\002\037\003\000\002\034\003\000" +
    "\002\034\003\000\002\036\003\000\002\036\003\000\002" +
    "\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\024\002\uffa7\007\013\010\006\012\021\013" +
    "\005\014\007\016\004\020\016\065\020\001\002\000\026" +
    "\007\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\063\077\065\uffa7\001\002\000\032\010\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7\057" +
    "\uffa7\063\077\064\uffa7\065\uffa7\066\uffa7\001\002\000\006" +
    "\006\253\065\252\001\002\000\006\063\077\065\uffa7\001" +
    "\002\000\054\002\ufff8\006\uffd5\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\022" +
    "\ufff8\024\ufff8\025\ufff8\053\uffd5\055\uffd5\057\uffd5\061\ufff8" +
    "\063\ufff8\065\ufff8\066\uffd5\001\002\000\004\002\213\001" +
    "\002\000\042\002\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\022\uffa7\024" +
    "\uffa7\025\uffa7\061\206\063\uffa7\065\uffa7\001\002\000\006" +
    "\010\175\065\104\001\002\000\012\002\uffff\011\uffff\017" +
    "\uffff\022\uffff\001\002\000\016\002\uffa7\011\uffa7\017\uffa7" +
    "\022\uffa7\024\170\025\171\001\002\000\032\010\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7\057\uffa7" +
    "\063\077\064\uffa7\065\uffa7\066\uffa7\001\002\000\004\004" +
    "\152\001\002\000\126\002\uffe2\004\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2\066\uffe2\001\002" +
    "\000\004\063\147\001\002\000\020\004\uffe7\006\uffd6\053" +
    "\uffd6\055\uffd6\057\uffd6\062\145\066\uffd6\001\002\000\014" +
    "\006\027\053\031\055\030\057\024\066\025\001\002\000" +
    "\034\010\045\026\041\027\051\030\037\034\042\051\035" +
    "\052\047\055\126\057\024\060\uffc7\064\043\065\130\066" +
    "\053\001\002\000\124\002\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\065\uffcf\066\uffcf\001\002\000\124" +
    "\002\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\024\uffd4\025\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\065\uffd4\066\uffd4\001\002\000\004\066\123\001\002\000" +
    "\030\010\045\026\041\027\051\030\037\034\042\051\035" +
    "\052\047\057\024\064\043\065\020\066\053\001\002\000" +
    "\032\010\045\026\041\027\051\030\037\034\042\051\035" +
    "\052\047\054\033\057\024\064\043\065\020\066\053\001" +
    "\002\000\124\002\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\024\uffd0\025\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\066\uffd0\001\002\000\124\002\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1" +
    "\025\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1" +
    "\066\uffd1\001\002\000\004\054\120\001\002\000\030\010" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\034\uffaf\051\uffaf\052\uffaf" +
    "\057\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000\112\002" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7\025" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\054\uffd7\056\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\065\uffd7\001\002\000\112\002\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\054\uffde\056\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\065\uffde\001\002\000\104\002\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\022\uffe5\024\uffe5\025\uffe5\032\065\033\072\034" +
    "\067\035\070\036\060\037\057\040\062\041\063\042\075" +
    "\043\061\044\066\045\071\046\073\047\056\050\074\054" +
    "\uffe5\061\uffe5\062\116\063\uffe5\065\uffe5\001\002\000\112" +
    "\002\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0" +
    "\025\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\054\uffe0\056\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\065\uffe0\001\002\000\030\010\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\034\uffb0\051\uffb0\052\uffb0\057" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\112\002\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\056\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\065\uffdd\001\002\000\124\002\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5\066\uffd5" +
    "\001\002\000\006\053\uffa7\063\077\001\002\000\030\010" +
    "\045\026\041\027\051\030\037\034\042\051\035\052\047" +
    "\057\024\064\043\065\020\066\053\001\002\000\030\010" +
    "\uffae\026\uffae\027\uffae\030\uffae\034\uffae\051\uffae\052\uffae" +
    "\057\uffae\064\uffae\065\uffae\066\uffae\001\002\000\112\002" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\054\uffda\056\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\065\uffda\001\002\000\112\002\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\054\uffdf\056\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\065\uffdf\001\002\000\124\002\uffdb\006\027\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\053\031\054\uffdb\055\030\056\uffdb\057\024" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\065\uffdb\066\025\001" +
    "\002\000\112\002\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\024\uffdc\025\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\054\uffdc\056\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\001\002\000" +
    "\124\002\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\024\uffd6\025\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\065\uffd6\066\uffd6\001\002\000\112\002\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\032\065" +
    "\033\072\034\067\035\070\036\060\037\057\040\062\041" +
    "\063\042\075\043\061\044\066\045\071\046\073\047\056" +
    "\050\074\054\uffd8\056\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\065\uffd8\001\002\000\030\010\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\034\uffb2\051\uffb2\052\uffb2\057\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\001\002\000\030\010\uffba\026\uffba\027\uffba" +
    "\030\uffba\034\uffba\051\uffba\052\uffba\057\uffba\064\uffba\065" +
    "\uffba\066\uffba\001\002\000\030\010\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\034\uffbb\051\uffbb\052\uffbb\057\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\001\002\000\030\010\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\034\uffb6\051\uffb6\052\uffb6\057\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\001\002\000\030\010\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\034\uffb9\051\uffb9\052\uffb9\057\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\001\002\000\030\010\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\034\uffb8\051\uffb8\052\uffb8\057\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\001\002\000\030\010\045\026\041\027\051" +
    "\030\037\034\042\051\035\052\047\057\024\064\043\065" +
    "\020\066\053\001\002\000\030\010\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\034\uffbf\051\uffbf\052\uffbf\057\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\001\002\000\030\010\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\034\uffb5\051\uffb5\052\uffb5\057\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\001\002\000\030\010\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\034\uffbe\051\uffbe\052\uffbe\057\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\001\002\000\030\010\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\034\uffbc\051\uffbc\052\uffbc\057\uffbc\064\uffbc\065" +
    "\uffbc\066\uffbc\001\002\000\030\010\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\034\uffb4\051\uffb4\052\uffb4\057\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\001\002\000\030\010\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\034\uffbd\051\uffbd\052\uffbd\057\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\001\002\000\030\010\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\034\uffb3\051\uffb3\052\uffb3\057\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\001\002\000\030\010\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\034\uffb1\051\uffb1\052\uffb1\057\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\001\002\000\030\010\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\034\uffb7\051\uffb7\052\uffb7\057\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\001\002\000\112\002\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\032\065\033\072" +
    "\034\067\035\070\036\060\037\057\040\062\041\063\042" +
    "\075\043\061\044\066\045\071\046\073\047\056\050\074" +
    "\054\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065" +
    "\uffd9\001\002\000\074\002\uffa9\004\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\034\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\057\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002" +
    "\000\074\002\uffa8\004\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\034\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8" +
    "\062\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000\004\053" +
    "\103\001\002\000\112\002\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\024\uffce\025\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\054\uffce" +
    "\056\uffce\060\uffce\061\uffce\062\uffce\063\uffce\065\uffce\001" +
    "\002\000\010\031\106\054\uffc9\065\104\001\002\000\040" +
    "\004\uffa7\010\uffa7\026\uffa7\027\uffa7\030\uffa7\034\uffa7\051" +
    "\uffa7\052\uffa7\054\uffa7\057\uffa7\062\uffa7\063\077\064\uffa7" +
    "\065\uffa7\066\uffa7\001\002\000\006\054\uffcc\062\113\001" +
    "\002\000\004\054\uffca\001\002\000\004\054\110\001\002" +
    "\000\024\007\013\010\006\011\uffa7\012\021\013\005\014" +
    "\007\016\004\020\016\065\020\001\002\000\004\011\112" +
    "\001\002\000\112\002\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\024\uffcd\025\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\054\uffcd\056" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd\001\002" +
    "\000\004\031\114\001\002\000\004\054\uffcb\001\002\000" +
    "\036\004\uffe3\010\uffe3\026\uffe3\027\uffe3\030\uffe3\034\uffe3" +
    "\051\uffe3\052\uffe3\054\uffe3\057\uffe3\062\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\001\002\000\030\010\045\026\041\027\051" +
    "\030\037\034\042\051\035\052\047\057\024\064\043\065" +
    "\020\066\053\001\002\000\044\002\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\054\uffe4\061\uffe4\063\uffe4" +
    "\065\uffe4\001\002\000\124\002\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\065\uffd2\066\uffd2\001\002\000" +
    "\042\032\065\033\072\034\067\035\070\036\060\037\057" +
    "\040\062\041\063\042\075\043\061\044\066\045\071\046" +
    "\073\047\056\050\074\056\122\001\002\000\126\002\uffe1" +
    "\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\025\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\065\uffe1\066\uffe1\001\002\000\010\053\031\057\024\066" +
    "\025\001\002\000\124\002\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\001\002\000\010" +
    "\060\uffc6\061\142\062\143\001\002\000\030\010\045\026" +
    "\041\027\051\030\037\034\042\051\035\052\047\057\024" +
    "\064\043\065\020\066\053\001\002\000\046\032\065\033" +
    "\072\034\067\035\070\036\060\037\057\040\062\041\063" +
    "\042\075\043\061\044\066\045\071\046\073\047\056\050" +
    "\074\060\uffc2\061\uffc2\062\uffc2\001\002\000\062\004\133" +
    "\006\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\053\uffe2\055\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\066\uffe2\001\002\000\004\060\132" +
    "\001\002\000\124\002\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\024\uffc8\025\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\065\uffc8\066\uffc8\001\002\000\030\010" +
    "\045\026\041\027\051\030\037\034\042\051\035\052\047" +
    "\057\024\064\043\065\020\066\053\001\002\000\046\032" +
    "\065\033\072\034\067\035\070\036\060\037\057\040\062" +
    "\041\063\042\075\043\061\044\066\045\071\046\073\047" +
    "\056\050\074\060\uffc3\061\uffc3\062\uffc3\001\002\000\042" +
    "\032\065\033\072\034\067\035\070\036\060\037\057\040" +
    "\062\041\063\042\075\043\061\044\066\045\071\046\073" +
    "\047\056\050\074\056\136\001\002\000\004\004\137\001" +
    "\002\000\030\010\045\026\041\027\051\030\037\034\042" +
    "\051\035\052\047\057\024\064\043\065\020\066\053\001" +
    "\002\000\046\032\065\033\072\034\067\035\070\036\060" +
    "\037\057\040\062\041\063\042\075\043\061\044\066\045" +
    "\071\046\073\047\056\050\074\060\uffc4\061\uffc4\062\uffc4" +
    "\001\002\000\034\010\045\026\041\027\051\030\037\034" +
    "\042\051\035\052\047\055\126\057\024\060\uffc7\064\043" +
    "\065\130\066\053\001\002\000\034\010\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\034\uffc0\051\uffc0\052\uffc0\055\uffc0\057\uffc0" +
    "\060\uffc0\064\uffc0\065\uffc0\066\uffc0\001\002\000\034\010" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\034\uffc1\051\uffc1\052\uffc1" +
    "\055\uffc1\057\uffc1\060\uffc1\064\uffc1\065\uffc1\066\uffc1\001" +
    "\002\000\004\060\uffc5\001\002\000\004\065\020\001\002" +
    "\000\004\004\uffe6\001\002\000\024\007\013\010\006\011" +
    "\uffa7\012\021\013\005\014\007\016\004\020\016\065\020" +
    "\001\002\000\004\011\151\001\002\000\042\002\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\022\ufff7\024\ufff7\025\ufff7\061\ufff7\063" +
    "\ufff7\065\ufff7\001\002\000\030\010\045\026\041\027\051" +
    "\030\037\034\042\051\035\052\047\057\024\064\043\065" +
    "\020\066\053\001\002\000\042\002\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\022\ufff9\024\ufff9\025\ufff9\061\ufff9\063\ufff9\065\ufff9" +
    "\001\002\000\030\010\045\026\041\027\051\030\037\034" +
    "\042\051\035\052\047\057\024\064\043\065\020\066\053" +
    "\001\002\000\044\021\uffa7\032\065\033\072\034\067\035" +
    "\070\036\060\037\057\040\062\041\063\042\075\043\061" +
    "\044\066\045\071\046\073\047\056\050\074\063\077\001" +
    "\002\000\004\021\157\001\002\000\030\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\020\uffa7\022" +
    "\uffa7\063\077\065\uffa7\001\002\000\026\007\013\010\006" +
    "\011\uffa7\012\021\013\005\014\007\016\004\020\016\022" +
    "\uffa7\065\020\001\002\000\006\011\uffa7\022\162\001\002" +
    "\000\026\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\016\uffa7\020\uffa7\063\077\065\uffa7\001\002\000\004" +
    "\011\165\001\002\000\004\011\uffea\001\002\000\042\002" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\022\ufff4\024\ufff4\025\ufff4\061" +
    "\ufff4\063\ufff4\065\ufff4\001\002\000\024\007\013\010\006" +
    "\011\uffa7\012\021\013\005\014\007\016\004\020\016\065" +
    "\020\001\002\000\004\011\uffeb\001\002\000\002\001\002" +
    "\000\012\002\ufffb\011\ufffb\017\ufffb\022\ufffb\001\002\000" +
    "\012\002\ufffa\011\ufffa\017\ufffa\022\ufffa\001\002\000\012" +
    "\002\000\011\000\017\000\022\000\001\002\000\012\002" +
    "\ufffc\011\ufffc\017\ufffc\022\ufffc\001\002\000\004\010\045" +
    "\001\002\000\032\004\200\010\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\034\uffa7\051\uffa7\052\uffa7\057\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\001\002\000\030\010\045\026\041\027\051\030" +
    "\037\034\042\051\035\052\047\057\024\064\043\065\020" +
    "\066\053\001\002\000\030\010\uffad\026\uffad\027\uffad\030" +
    "\uffad\034\uffad\051\uffad\052\uffad\057\uffad\064\uffad\065\uffad" +
    "\066\uffad\001\002\000\030\010\uffac\026\uffac\027\uffac\030" +
    "\uffac\034\uffac\051\uffac\052\uffac\057\uffac\064\uffac\065\uffac" +
    "\066\uffac\001\002\000\042\002\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\024\uffef\025\uffef\061\uffef\063\uffef\065\uffef\001" +
    "\002\000\004\065\204\001\002\000\004\053\103\001\002" +
    "\000\042\002\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0\024\ufff0" +
    "\025\ufff0\061\ufff0\063\ufff0\065\ufff0\001\002\000\040\002" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\016\uffab\017\uffab\020\uffab\022\uffab\024\uffab\025\uffab\063" +
    "\uffab\065\uffab\001\002\000\040\002\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\063\uffaa\065\uffaa\001\002" +
    "\000\040\002\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\022\uffa7\024\uffa7" +
    "\025\uffa7\063\077\065\uffa7\001\002\000\036\002\ufffe\007" +
    "\013\010\006\011\ufffe\012\021\013\005\014\007\016\004" +
    "\017\ufffe\020\016\022\ufffe\024\ufffe\025\ufffe\065\020\001" +
    "\002\000\016\002\ufffd\011\ufffd\017\ufffd\022\ufffd\024\ufffd" +
    "\025\ufffd\001\002\000\004\002\001\001\002\000\004\065" +
    "\215\001\002\000\010\004\uffa7\015\uffa7\063\077\001\002" +
    "\000\004\015\217\001\002\000\032\010\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7\057\uffa7\063\077" +
    "\064\uffa7\065\uffa7\066\uffa7\001\002\000\030\010\045\026" +
    "\041\027\051\030\037\034\042\051\035\052\047\057\024" +
    "\064\043\065\020\066\053\001\002\000\006\012\uffa7\063" +
    "\077\001\002\000\004\012\223\001\002\000\026\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\020" +
    "\uffa7\063\077\065\uffa7\001\002\000\024\007\013\010\006" +
    "\011\uffa7\012\021\013\005\014\007\016\004\020\016\065" +
    "\020\001\002\000\004\011\226\001\002\000\042\002\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\024\ufff2\025\ufff2\061\ufff2" +
    "\063\ufff2\065\ufff2\001\002\000\006\004\230\015\uffe3\001" +
    "\002\000\032\010\uffa7\026\uffa7\027\uffa7\030\uffa7\034\uffa7" +
    "\051\uffa7\052\uffa7\057\uffa7\063\077\064\uffa7\065\uffa7\066" +
    "\uffa7\001\002\000\030\010\045\026\041\027\051\030\037" +
    "\034\042\051\035\052\047\057\024\064\043\065\020\066" +
    "\053\001\002\000\044\032\065\033\072\034\067\035\070" +
    "\036\060\037\057\040\062\041\063\042\075\043\061\044" +
    "\066\045\071\046\073\047\056\050\074\062\uffa7\063\077" +
    "\001\002\000\004\062\234\001\002\000\032\010\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7\057\uffa7" +
    "\063\077\064\uffa7\065\uffa7\066\uffa7\001\002\000\030\010" +
    "\045\026\041\027\051\030\037\034\042\051\035\052\047" +
    "\057\024\064\043\065\020\066\053\001\002\000\046\012" +
    "\uffa7\032\065\033\072\034\067\035\070\036\060\037\057" +
    "\040\062\041\063\042\075\043\061\044\066\045\071\046" +
    "\073\047\056\050\074\062\240\063\uffa7\001\002\000\006" +
    "\012\uffa7\063\077\001\002\000\032\010\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7\057\uffa7\063\077" +
    "\064\uffa7\065\uffa7\066\uffa7\001\002\000\006\012\uffe8\063" +
    "\uffe8\001\002\000\030\010\045\026\041\027\051\030\037" +
    "\034\042\051\035\052\047\057\024\064\043\065\020\066" +
    "\053\001\002\000\044\012\uffe9\032\065\033\072\034\067" +
    "\035\070\036\060\037\057\040\062\041\063\042\075\043" +
    "\061\044\066\045\071\046\073\047\056\050\074\063\uffe9" +
    "\001\002\000\004\012\245\001\002\000\026\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\020\uffa7" +
    "\063\077\065\uffa7\001\002\000\024\007\013\010\006\011" +
    "\uffa7\012\021\013\005\014\007\016\004\020\016\065\020" +
    "\001\002\000\004\011\250\001\002\000\042\002\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\022\ufff3\024\ufff3\025\ufff3\061\ufff3\063" +
    "\ufff3\065\ufff3\001\002\000\004\053\103\001\002\000\006" +
    "\005\255\053\uffee\001\002\000\004\065\254\001\002\000" +
    "\004\053\uffec\001\002\000\006\006\253\065\252\001\002" +
    "\000\004\053\uffed\001\002\000\042\002\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\022\ufff1\024\ufff1\025\ufff1\061\ufff1\063\ufff1\065" +
    "\ufff1\001\002\000\030\010\045\026\041\027\051\030\037" +
    "\034\042\051\035\052\047\057\024\064\043\065\020\066" +
    "\053\001\002\000\044\012\uffa7\032\065\033\072\034\067" +
    "\035\070\036\060\037\057\040\062\041\063\042\075\043" +
    "\061\044\066\045\071\046\073\047\056\050\074\063\077" +
    "\001\002\000\004\012\263\001\002\000\026\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\020\uffa7" +
    "\063\077\065\uffa7\001\002\000\024\007\013\010\006\011" +
    "\uffa7\012\021\013\005\014\007\016\004\020\016\065\020" +
    "\001\002\000\004\011\266\001\002\000\042\002\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\024\ufff6\025\ufff6\061\ufff6\063" +
    "\ufff6\065\ufff6\001\002\000\024\007\013\010\006\012\021" +
    "\013\005\014\007\016\004\017\uffa7\020\016\065\020\001" +
    "\002\000\004\017\271\001\002\000\032\010\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7\057\uffa7\063" +
    "\077\064\uffa7\065\uffa7\066\uffa7\001\002\000\030\010\045" +
    "\026\041\027\051\030\037\034\042\051\035\052\047\057" +
    "\024\064\043\065\020\066\053\001\002\000\100\002\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\022\ufff5\024\ufff5\025\ufff5\032\065" +
    "\033\072\034\067\035\070\036\060\037\057\040\062\041" +
    "\063\042\075\043\061\044\066\045\071\046\073\047\056" +
    "\050\074\061\ufff5\063\ufff5\065\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\022\003\010\005\011\006\014\012\016\013" +
    "\021\021\022\022\007\035\013\001\001\000\006\035\077" +
    "\036\266\001\001\000\006\035\077\036\257\001\001\000" +
    "\004\010\250\001\001\000\006\035\077\036\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\207\035" +
    "\206\001\001\000\004\014\175\001\001\000\002\001\001" +
    "\000\006\007\172\035\171\001\001\000\006\035\077\036" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\025\026\031\001" +
    "\001\000\024\013\053\017\126\021\051\022\043\023\035" +
    "\026\047\027\130\030\124\033\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\053" +
    "\017\120\021\051\022\043\023\035\026\047\033\045\001" +
    "\001\000\022\013\053\015\033\017\037\021\051\022\043" +
    "\023\035\026\047\033\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\077\036\100\001\001\000\020\013" +
    "\053\017\054\021\051\022\043\023\035\026\047\033\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\025\026\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\053\017" +
    "\075\021\051\022\043\023\035\026\047\033\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\101\001\001\000\002\001\001\000\006\014\104\025" +
    "\106\001\001\000\006\035\077\036\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\110\005\011\006\014\012\016\013\021\021\022\022\007" +
    "\035\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\053\015\116\017\037\021\051\022\043\023\035\026" +
    "\047\033\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\063\001\001\000\002\001\001\000\006\016" +
    "\123\026\031\001\001\000\002\001\001\000\004\031\140" +
    "\001\001\000\020\013\053\017\134\021\051\022\043\023" +
    "\035\026\047\033\045\001\001\000\004\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\053\017\133\021\051\022\043\023\035\026\047" +
    "\033\045\001\001\000\004\032\063\001\001\000\004\032" +
    "\063\001\001\000\002\001\001\000\020\013\053\017\137" +
    "\021\051\022\043\023\035\026\047\033\045\001\001\000" +
    "\004\032\063\001\001\000\024\013\053\017\126\021\051" +
    "\022\043\023\035\026\047\027\143\030\124\033\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\145\013\021\021\022\022\043\001\001\000" +
    "\002\001\001\000\022\003\147\005\011\006\014\012\016" +
    "\013\021\021\022\022\007\035\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\053\015\152\017\037" +
    "\021\051\022\043\023\035\026\047\033\045\001\001\000" +
    "\002\001\001\000\020\013\053\017\154\021\051\022\043" +
    "\023\035\026\047\033\045\001\001\000\010\032\063\035" +
    "\077\036\155\001\001\000\002\001\001\000\006\035\077" +
    "\036\157\001\001\000\022\003\160\005\011\006\014\012" +
    "\016\013\021\021\022\022\007\035\013\001\001\000\006" +
    "\004\162\035\163\001\001\000\006\035\077\036\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\166\005\011\006\014\012\016\013\021\021" +
    "\022\022\007\035\013\001\001\000\002\001\001\000\004" +
    "\040\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\202\001\001" +
    "\000\006\035\200\037\176\001\001\000\022\013\053\015" +
    "\201\017\037\021\051\022\043\023\035\026\047\033\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\077\036\210\001\001\000\016\005\011\006\211\012\016" +
    "\013\021\021\022\022\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\215\001\001\000\006\035\077" +
    "\036\226\001\001\000\002\001\001\000\006\035\077\036" +
    "\217\001\001\000\022\013\053\015\220\017\037\021\051" +
    "\022\043\023\035\026\047\033\045\001\001\000\006\035" +
    "\077\036\221\001\001\000\002\001\001\000\006\035\077" +
    "\036\223\001\001\000\022\003\224\005\011\006\014\012" +
    "\016\013\021\021\022\022\007\035\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\077\036\230\001\001\000\020\013\053\017\231\021\051" +
    "\022\043\023\035\026\047\033\045\001\001\000\010\032" +
    "\063\035\077\036\232\001\001\000\002\001\001\000\006" +
    "\035\077\036\234\001\001\000\020\013\053\017\235\021" +
    "\051\022\043\023\035\026\047\033\045\001\001\000\010" +
    "\020\236\032\063\035\240\001\001\000\006\035\077\036" +
    "\243\001\001\000\006\035\077\036\241\001\001\000\002" +
    "\001\001\000\020\013\053\017\242\021\051\022\043\023" +
    "\035\026\047\033\045\001\001\000\004\032\063\001\001" +
    "\000\002\001\001\000\006\035\077\036\245\001\001\000" +
    "\022\003\246\005\011\006\014\012\016\013\021\021\022" +
    "\022\007\035\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\053\017\260" +
    "\021\051\022\043\023\035\026\047\033\045\001\001\000" +
    "\010\032\063\035\077\036\261\001\001\000\002\001\001" +
    "\000\006\035\077\036\263\001\001\000\022\003\264\005" +
    "\011\006\014\012\016\013\021\021\022\022\007\035\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\267\005\011\006\014\012\016\013\021\021\022\022\007" +
    "\035\013\001\001\000\002\001\001\000\006\035\077\036" +
    "\271\001\001\000\020\013\053\017\272\021\051\022\043" +
    "\023\035\026\047\033\045\001\001\000\004\032\063\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex) {
  		
      super(lex);
      lexer = lex;
     
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.print(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // optws ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optws",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // optws ::= WS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optws",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optsemi ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // optsemi ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // optasm ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasm",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optasm ::= ASM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasm",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unop ::= LENGTH 
            {
              Integer RESULT =null;
		 RESULT = Op.LEN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unop ::= NOT 
            {
              Integer RESULT =null;
		 RESULT = Op.NOT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Op.UNM; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binop ::= OR 
            {
              Integer RESULT =null;
		 RESULT = Op.OR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binop ::= AND 
            {
              Integer RESULT =null;
		 RESULT = Op.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binop ::= GR 
            {
              Integer RESULT =null;
		 RESULT = Op.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binop ::= LE 
            {
              Integer RESULT =null;
		 RESULT = Op.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.NEQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = Op.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= CONCAT 
            {
              Integer RESULT =null;
		 RESULT = Op.CONCAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= POW 
            {
              Integer RESULT =null;
		 RESULT = Op.POW; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Op.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Op.DIV; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Op.MUL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Op.SUB; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = Op.ADD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fieldsep ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fieldsep ::= COM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // field ::= exp 
            {
              Field RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldExp(e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // field ::= ID ASM exp 
            {
              Field RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldNameExp(ident,e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // field ::= LBRACK exp RBRACK ASM exp 
            {
              Field RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldLRExp(e1,e2);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fieldlist ::= field fieldsep fieldlist 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fl==null) {
									RESULT = new FieldList(f);
								}
								else
								{
									fl.insertElementAt(f,0);
									RESULT = fl;
								}						
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fieldlist ::= field 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldList(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fieldlist ::= 
            {
              FieldList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tableconstructor ::= LCURL fieldlist RCURL 
            {
              TableConstructor RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TableConstructor(fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parlist ::= 
            {
              ParList RESULT =null;
		
							RESULT = new ParList(null, false);
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parlist ::= PARAMS 
            {
              ParList RESULT =null;
		
							RESULT = new ParList(null,true);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parlist ::= namelist COM PARAMS 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
							RESULT = new ParList(nl,true);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parlist ::= namelist 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new ParList(nl,false);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              FuncBody RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParList pl = (ParList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
								RESULT = new FuncBody(pl,bl);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function ::= FUNC optws funcbody 
            {
              Function RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Function(fb);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // args ::= TEXT 
            {
              ExpList RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(new TextExp(txt)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args ::= tableconstructor 
            {
              ExpList RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(new TableConstructorExp(tc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // args ::= LPAREN RPAREN 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // args ::= LPAREN explist RPAREN 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							RESULT = el;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // functioncall ::= prefixexp DDOT TEXT args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int namleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new FuncCallSelf(pexp,new Name(nam),ar);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // functioncall ::= prefixexp args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside functioncall");
							RESULT = new FuncCall(pexp,ar);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // prefixexp ::= functioncall 
            {
              PrefixExp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside prefixexp");
							RESULT =  new PrefixExpFuncCall(fc);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // prefixexp ::= var 
            {
              PrefixExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new PrefixExpVar(v);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= function 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionExp(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= unop exp 
            {
              Exp RESULT =null;
		int uopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer uop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Unop(uop,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp binop exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Binop(e1,op,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= tableconstructor 
            {
              Exp RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TableConstructorExp(tc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= prefixexp 
            {
              Exp RESULT =null;
		int prefixexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prefixexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrefixExp prefixexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PreExp(prefixexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= TEXT 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TextExp(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= NUMBER 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 					   
								RESULT = new NumberExp(num); 						
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new BooleanExp(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new BooleanExp(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new Nil(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var ::= prefixexp LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  						
						RESULT =  new VarTabIndex(pe,e);						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  						
						RESULT =  new Variable(id);						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // namelist ::= ID optws 
            {
              NameList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NameList(new Name(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // explist ::= exp COM explist 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if(el == null) {
									el = new ExpList(e);
								RESULT = el;} 
								else {
									el.insertElementAt(e,0);
								RESULT = el;}
	
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // explist ::= exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT= new ExpList(e);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // varlist ::= var COM varlist 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						if(vl==null){
						vl = new VarList(v);
						RESULT = vl; }
						else {
						vl.insertElementAt(v,0);
						RESULT = vl; }
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // varlist ::= var 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 							
						RESULT= new VarList(v);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // optforexp ::= empty 
            {
              Exp RESULT =null;
		 RESULT = new NumberExp(1.0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // optforexp ::= COM optws exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // optelse ::= empty 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // optelse ::= ELSE optws block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcname ::= DDOT ID 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcname ::= ID DOT funcname 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcname ::= ID 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL namelist optasm explist 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LocalDecl(nl,el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL FUNC function ID funcbody 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FUNC funcname funcbody 
            {
              Stat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR optws namelist IN optws explist optws DO optws block END 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForIn(nl,el,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= FOR optws ID optws ASM optws exp optws COM optws exp optforexp optws DO optws block END 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		
								RESULT = new ForExp(id,e1,e2,e3,b); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= IF optws exp optws THEN optws block optelse END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block elseblock = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	RESULT = new IfThenElse(e, b, elseblock);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= REPEAT optws block UNTIL optws exp 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 		RESULT = new RepeatUntil(b,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= WHILE optws exp optws DO optws block END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		RESULT = new WhileExp(e,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= DO WS block END 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    
								System.out.println("Inside DO END");
								RESULT = new DoExp(b); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= functioncall 
            {
              Stat RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						  RESULT = new FuncCallStmt(fc);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist ASM explist 
            {
              Stat RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
								System.out.println("Inside stat");
								RESULT = new Asm(vl,el);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // laststat ::= empty 
            {
              LastStat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // laststat ::= BREAK 
            {
              LastStat RESULT =null;
		 RESULT = new LastBreak(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // laststat ::= RETURN optexplist 
            {
              LastStat RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
							System.out.println("Inside laststat");
							RESULT = new LastReturn( (ExpList) el); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statlist ::= stat optsemi optws statlist 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
								
					   		if(sl== null){
					    	System.out.println("Inside recu stat"); 	
					    	sl =new StatList(s);
							RESULT = sl;}
							else{
							System.out.println("Inside recu stat");
							sl.insertElementAt(s,0);
							RESULT = sl;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statlist ::= stat optsemi optws 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 	
							System.out.println("Inside single stat"); 			
							RESULT = new StatList(s);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= empty 
            {
              Block RESULT =null;
		 System.out.println("Inside empty block"); RESULT = new Block(null,null);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // block ::= statlist laststat 
            {
              Block RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList stats = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LastStat lstat = (LastStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		       
                 			if(lstat == null)   {   
                 			System.out.println("Inside block");    	    
                 			RESULT = new Block(stats,null); 	}
                 			else	{
                 			System.out.println("Inside block with laststat");   
                 			RESULT = new Block(stats,lstat);  }
                 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

