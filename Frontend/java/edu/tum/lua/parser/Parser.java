
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 26 16:53:14 CEST 2013
//----------------------------------------------------

package edu.tum.lua.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import edu.tum.lua.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 26 16:53:14 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\005\006" +
    "\000\002\005\007\000\002\004\007\000\002\004\003\000" +
    "\002\004\006\000\002\004\012\000\002\004\010\000\002" +
    "\004\013\000\002\004\023\000\002\004\016\000\002\004" +
    "\005\000\002\004\007\000\002\004\006\000\002\006\005" +
    "\000\002\006\007\000\002\006\005\000\002\006\006\000" +
    "\002\007\003\000\002\007\005\000\002\007\004\000\002" +
    "\003\005\000\002\003\012\000\002\003\003\000\002\017" +
    "\005\000\002\017\003\000\002\010\004\000\002\010\007" +
    "\000\002\013\004\000\002\013\007\000\002\015\005\000" +
    "\002\015\003\000\002\012\004\000\002\012\007\000\002" +
    "\011\003\000\002\011\006\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\004\000\002\016\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\004\000\002\021\006\000\002\014" +
    "\005\000\002\014\004\000\002\014\003\000\002\014\003" +
    "\000\002\022\005\000\002\023\007\000\002\024\003\000" +
    "\002\024\005\000\002\024\003\000\002\024\002\000\002" +
    "\025\005\000\002\025\004\000\002\026\003\000\002\026" +
    "\005\000\002\027\007\000\002\027\005\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\036\003\000\002\036\003\000\002\033" +
    "\003\000\002\033\003\000\002\035\003\000\002\035\003" +
    "\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\032\002\uffa0\007\uffa0\010\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\016\uffa0\020\uffa0\024\006\025\007\063\005" +
    "\065\uffa0\001\002\000\020\002\uffff\011\uffff\017\uffff\022" +
    "\uffff\023\uffff\024\006\025\007\001\002\000\102\002\uffa2" +
    "\004\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\034" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\057\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000" +
    "\046\002\uffa0\010\uffa0\011\uffa0\017\uffa0\022\uffa0\023\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0\052\uffa0\057" +
    "\uffa0\061\uffa0\063\005\064\uffa0\065\uffa0\066\uffa0\001\002" +
    "\000\040\002\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0" +
    "\061\uffa0\063\005\065\uffa0\001\002\000\034\002\ufffd\007" +
    "\uffa1\010\uffa1\011\ufffd\012\uffa1\013\uffa1\014\uffa1\016\uffa1" +
    "\017\ufffd\020\uffa1\022\ufffd\023\ufffd\065\uffa1\001\002\000" +
    "\014\002\ufffe\011\ufffe\017\ufffe\022\ufffe\023\ufffe\001\002" +
    "\000\004\002\317\001\002\000\022\007\021\010\017\012" +
    "\026\013\015\014\016\016\014\020\023\065\025\001\002" +
    "\000\032\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\024\uffa0\025\uffa0\063\005\065\uffa0" +
    "\001\002\000\032\010\uffa0\026\uffa0\027\uffa0\030\uffa0\034" +
    "\uffa0\051\uffa0\052\uffa0\057\uffa0\063\005\064\uffa0\065\uffa0" +
    "\066\uffa0\001\002\000\006\063\005\065\uffa0\001\002\000" +
    "\006\006\240\065\236\001\002\000\056\002\ufff9\006\uffce" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\053\uffce\055\uffce\057\uffce\061\ufff9\063\ufff9\065\ufff9\066" +
    "\uffce\001\002\000\010\010\223\063\005\065\uffa0\001\002" +
    "\000\044\002\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\061\216\063\uffa0\065\uffa0\001\002\000" +
    "\032\010\uffa0\026\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0" +
    "\052\uffa0\057\uffa0\063\005\064\uffa0\065\uffa0\066\uffa0\001" +
    "\002\000\006\004\uffa0\063\005\001\002\000\130\002\uffdb" +
    "\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\065\uffdb\066\uffdb\001\002\000\032\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0" +
    "\024\uffa0\025\uffa0\063\005\065\uffa0\001\002\000\022\004" +
    "\uffa0\006\uffcf\053\uffcf\055\uffcf\057\uffcf\062\uffa0\063\005" +
    "\066\uffcf\001\002\000\014\006\034\053\036\055\035\057" +
    "\031\066\033\001\002\000\034\010\052\026\046\027\056" +
    "\030\044\034\047\051\042\052\054\055\137\057\031\060" +
    "\143\064\050\065\141\066\060\001\002\000\126\002\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\126\002\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8\066" +
    "\uffc8\001\002\000\004\066\134\001\002\000\030\010\052" +
    "\026\046\027\056\030\044\034\047\051\042\052\054\057" +
    "\031\064\050\065\025\066\060\001\002\000\032\010\052" +
    "\026\046\027\056\030\044\034\047\051\042\052\054\054" +
    "\040\057\031\064\050\065\025\066\060\001\002\000\126" +
    "\002\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\065\uffc9\066\uffc9\001\002\000\126\002\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\065" +
    "\uffca\066\uffca\001\002\000\004\054\131\001\002\000\030" +
    "\010\uffa8\026\uffa8\027\uffa8\030\uffa8\034\uffa8\051\uffa8\052" +
    "\uffa8\057\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000\114" +
    "\002\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\054\uffd0\056\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\001\002\000\114" +
    "\002\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\054\uffd7\056\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7\001\002\000\106" +
    "\002\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\032\072\033\077\034\074\035\075\036\065\037" +
    "\064\040\067\041\070\042\102\043\066\044\073\045\076" +
    "\046\100\047\063\050\101\054\uffa0\061\uffa0\062\uffa0\063" +
    "\005\065\uffa0\001\002\000\114\002\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\054\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\065\uffd9\001\002\000\030\010\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\034\uffa9\051\uffa9\052\uffa9\057\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\001\002\000\114\002\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\054\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\065\uffd6\001\002\000\126\002\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\065\uffce\066\uffce" +
    "\001\002\000\006\053\uffa0\063\005\001\002\000\030\010" +
    "\052\026\046\027\056\030\044\034\047\051\042\052\054" +
    "\057\031\064\050\065\025\066\060\001\002\000\030\010" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\034\uffa7\051\uffa7\052\uffa7" +
    "\057\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002\000\114\002" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\054\uffd3\056\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\065\uffd3\001\002\000\114\002" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\054\uffd8\056\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\065\uffd8\001\002\000\126\002" +
    "\uffd4\006\034\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\053\036\054\uffd4" +
    "\055\035\056\uffd4\057\031\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\065\uffd4\066\033\001\002\000\114\002\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\054\uffd5\056\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\065\uffd5\001\002\000\126\002\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf" +
    "\066\uffcf\001\002\000\114\002\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\032\072\033" +
    "\077\034\074\035\075\036\065\037\064\040\067\041\070" +
    "\042\102\043\066\044\073\045\076\046\100\047\063\050" +
    "\101\054\uffd1\056\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\065\uffd1\001\002\000\030\010\uffab\026\uffab\027\uffab\030" +
    "\uffab\034\uffab\051\uffab\052\uffab\057\uffab\064\uffab\065\uffab" +
    "\066\uffab\001\002\000\030\010\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\034\uffb3\051\uffb3\052\uffb3\057\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\001\002\000\030\010\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\034\uffb4\051\uffb4\052\uffb4\057\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\001\002\000\030\010\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\034\uffaf\051\uffaf\052\uffaf\057\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\001\002\000\030\010\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\034\uffb2\051\uffb2\052\uffb2\057\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\001\002\000\030\010\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\034\uffb1\051\uffb1\052\uffb1\057\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\001\002\000\030\010\052\026\046\027\056\030" +
    "\044\034\047\051\042\052\054\057\031\064\050\065\025" +
    "\066\060\001\002\000\030\010\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\034\uffb8\051\uffb8\052\uffb8\057\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\001\002\000\030\010\uffae\026\uffae\027\uffae\030" +
    "\uffae\034\uffae\051\uffae\052\uffae\057\uffae\064\uffae\065\uffae" +
    "\066\uffae\001\002\000\030\010\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\034\uffb7\051\uffb7\052\uffb7\057\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\001\002\000\030\010\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\034\uffb5\051\uffb5\052\uffb5\057\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\001\002\000\030\010\uffad\026\uffad\027\uffad\030" +
    "\uffad\034\uffad\051\uffad\052\uffad\057\uffad\064\uffad\065\uffad" +
    "\066\uffad\001\002\000\030\010\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\034\uffb6\051\uffb6\052\uffb6\057\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\001\002\000\030\010\uffac\026\uffac\027\uffac\030" +
    "\uffac\034\uffac\051\uffac\052\uffac\057\uffac\064\uffac\065\uffac" +
    "\066\uffac\001\002\000\030\010\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\034\uffaa\051\uffaa\052\uffaa\057\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\001\002\000\030\010\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\034\uffb0\051\uffb0\052\uffb0\057\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\001\002\000\114\002\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\032\072\033" +
    "\077\034\074\035\075\036\065\037\064\040\067\041\070" +
    "\042\102\043\066\044\073\045\076\046\100\047\063\050" +
    "\101\054\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\001\002\000\102\002\uffa1\004\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\034\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\057\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\001\002\000\004\053\107\001\002" +
    "\000\114\002\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\054\uffc7\056" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\001\002" +
    "\000\010\031\112\054\uffc2\065\110\001\002\000\054\002" +
    "\uffa0\004\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\054\uffa0\061\uffa0\062\uffa0\063\005" +
    "\065\uffa0\001\002\000\006\054\uffc5\062\117\001\002\000" +
    "\004\054\uffc3\001\002\000\004\054\114\001\002\000\032" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016" +
    "\uffa0\020\uffa0\024\006\025\007\063\005\065\uffa0\001\002" +
    "\000\004\011\116\001\002\000\114\002\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\054\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\065\uffc6\001\002\000\004\031\120\001\002\000" +
    "\004\054\uffc4\001\002\000\054\002\uffdd\004\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\054\uffdd\061\uffdd\062\122\063\uffdd\065\uffdd\001\002\000" +
    "\006\063\005\065\uffa0\001\002\000\004\065\110\001\002" +
    "\000\054\002\uffdc\004\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\054\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\065\uffdc\001\002\000\050\002\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\054\uffe1" +
    "\061\uffe1\062\126\063\uffe1\065\uffe1\001\002\000\032\010" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0\052\uffa0" +
    "\057\uffa0\063\005\064\uffa0\065\uffa0\066\uffa0\001\002\000" +
    "\030\010\052\026\046\027\056\030\044\034\047\051\042" +
    "\052\054\057\031\064\050\065\025\066\060\001\002\000" +
    "\046\002\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\054\uffe0\061\uffe0\063\uffe0\065\uffe0\001\002" +
    "\000\126\002\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\065\uffcb\066\uffcb\001\002\000\042\032" +
    "\072\033\077\034\074\035\075\036\065\037\064\040\067" +
    "\041\070\042\102\043\066\044\073\045\076\046\100\047" +
    "\063\050\101\056\133\001\002\000\130\002\uffda\004\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\065\uffda\066\uffda\001\002\000\010\053\036\057\031\066" +
    "\033\001\002\000\126\002\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\065\uffcc\066\uffcc\001\002" +
    "\000\010\060\uffbf\061\154\062\155\001\002\000\030\010" +
    "\052\026\046\027\056\030\044\034\047\051\042\052\054" +
    "\057\031\064\050\065\025\066\060\001\002\000\046\032" +
    "\072\033\077\034\074\035\075\036\065\037\064\040\067" +
    "\041\070\042\102\043\066\044\073\045\076\046\100\047" +
    "\063\050\101\060\uffbb\061\uffbb\062\uffbb\001\002\000\062" +
    "\004\145\006\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\053\uffdb\055\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\066\uffdb\001\002\000\004" +
    "\060\144\001\002\000\126\002\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0\066\uffc0\001" +
    "\002\000\126\002\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\065\uffc1\066\uffc1\001\002\000\030" +
    "\010\052\026\046\027\056\030\044\034\047\051\042\052" +
    "\054\057\031\064\050\065\025\066\060\001\002\000\046" +
    "\032\072\033\077\034\074\035\075\036\065\037\064\040" +
    "\067\041\070\042\102\043\066\044\073\045\076\046\100" +
    "\047\063\050\101\060\uffbc\061\uffbc\062\uffbc\001\002\000" +
    "\042\032\072\033\077\034\074\035\075\036\065\037\064" +
    "\040\067\041\070\042\102\043\066\044\073\045\076\046" +
    "\100\047\063\050\101\056\150\001\002\000\004\004\151" +
    "\001\002\000\030\010\052\026\046\027\056\030\044\034" +
    "\047\051\042\052\054\057\031\064\050\065\025\066\060" +
    "\001\002\000\046\032\072\033\077\034\074\035\075\036" +
    "\065\037\064\040\067\041\070\042\102\043\066\044\073" +
    "\045\076\046\100\047\063\050\101\060\uffbd\061\uffbd\062" +
    "\uffbd\001\002\000\032\010\052\026\046\027\056\030\044" +
    "\034\047\051\042\052\054\055\137\057\031\064\050\065" +
    "\141\066\060\001\002\000\032\010\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\034\uffb9\051\uffb9\052\uffb9\055\uffb9\057\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\001\002\000\032\010\uffba\026\uffba" +
    "\027\uffba\030\uffba\034\uffba\051\uffba\052\uffba\055\uffba\057" +
    "\uffba\064\uffba\065\uffba\066\uffba\001\002\000\004\060\uffbe" +
    "\001\002\000\010\004\uffe3\062\160\063\uffe3\001\002\000" +
    "\006\063\005\065\uffa0\001\002\000\004\065\025\001\002" +
    "\000\006\004\uffe2\063\uffe2\001\002\000\032\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0" +
    "\024\006\025\007\063\005\065\uffa0\001\002\000\004\011" +
    "\165\001\002\000\044\002\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\061\ufff8\063\ufff8\065\ufff8" +
    "\001\002\000\004\004\167\001\002\000\032\010\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0\052\uffa0\057\uffa0" +
    "\063\005\064\uffa0\065\uffa0\066\uffa0\001\002\000\030\010" +
    "\052\026\046\027\056\030\044\034\047\051\042\052\054" +
    "\057\031\064\050\065\025\066\060\001\002\000\044\002" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\061\ufffa\063\ufffa\065\ufffa\001\002\000\030\010\052" +
    "\026\046\027\056\030\044\034\047\051\042\052\054\057" +
    "\031\064\050\065\025\066\060\001\002\000\044\021\uffa0" +
    "\032\072\033\077\034\074\035\075\036\065\037\064\040" +
    "\067\041\070\042\102\043\066\044\073\045\076\046\100" +
    "\047\063\050\101\063\005\001\002\000\004\021\175\001" +
    "\002\000\036\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\016\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\063\005\065\uffa0\001\002\000\036\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\022" +
    "\uffa0\023\uffa0\024\006\025\007\063\005\065\uffa0\001\002" +
    "\000\010\011\uffa0\022\200\023\201\001\002\000\032\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0" +
    "\020\uffa0\024\uffa0\025\uffa0\063\005\065\uffa0\001\002\000" +
    "\004\063\205\001\002\000\004\011\204\001\002\000\004" +
    "\011\uffe6\001\002\000\044\002\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\061\ufff5\063\ufff5\065" +
    "\ufff5\001\002\000\030\010\052\026\046\027\056\030\044" +
    "\034\047\051\042\052\054\057\031\064\050\065\025\066" +
    "\060\001\002\000\042\032\072\033\077\034\074\035\075" +
    "\036\065\037\064\040\067\041\070\042\102\043\066\044" +
    "\073\045\076\046\100\047\063\050\101\063\207\001\002" +
    "\000\004\021\210\001\002\000\036\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\063\005\065\uffa0\001\002\000" +
    "\036\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\020\uffa0\022\uffa0\023\uffa0\024\006\025\007\063" +
    "\005\065\uffa0\001\002\000\010\011\uffa0\022\200\023\201" +
    "\001\002\000\004\011\uffe7\001\002\000\032\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0" +
    "\024\006\025\007\063\005\065\uffa0\001\002\000\004\011" +
    "\uffe8\001\002\000\042\002\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\063\uffa4\065\uffa4\001\002" +
    "\000\042\002\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\063\uffa3\065\uffa3\001\002\000\042\002" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\063\005\065\uffa0\001\002\000\042\002\ufffc\007\uffa0" +
    "\010\uffa0\011\ufffc\012\uffa0\013\uffa0\014\uffa0\016\uffa0\017" +
    "\ufffc\020\uffa0\022\ufffc\023\ufffc\024\ufffc\025\ufffc\063\005" +
    "\065\uffa0\001\002\000\020\002\ufffb\011\ufffb\017\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\001\002\000\004\010\052" +
    "\001\002\000\004\065\110\001\002\000\046\002\uffa0\004" +
    "\227\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\061\uffa0\063\uffa0\065\uffa0\001\002\000\044\002\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\061\ufff0\063\ufff0\065\ufff0\001\002\000\032\010\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0\052\uffa0\057\uffa0" +
    "\063\005\064\uffa0\065\uffa0\066\uffa0\001\002\000\044\002" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\061\uffde\063\uffde\065\uffde\001\002\000\030\010\052" +
    "\026\046\027\056\030\044\034\047\051\042\052\054\057" +
    "\031\064\050\065\025\066\060\001\002\000\044\002\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\061\uffdf\063\uffdf\065\uffdf\001\002\000\004\065\234\001" +
    "\002\000\004\053\107\001\002\000\044\002\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\061\ufff1" +
    "\063\ufff1\065\ufff1\001\002\000\006\005\243\053\uffeb\001" +
    "\002\000\004\053\107\001\002\000\004\065\241\001\002" +
    "\000\004\053\uffe9\001\002\000\044\002\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\061\ufff2\063" +
    "\ufff2\065\ufff2\001\002\000\006\006\240\065\236\001\002" +
    "\000\004\053\uffea\001\002\000\004\065\246\001\002\000" +
    "\012\004\uffa0\015\uffa0\062\uffa0\063\005\001\002\000\006" +
    "\015\uffa0\063\005\001\002\000\004\015\251\001\002\000" +
    "\032\010\uffa0\026\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0" +
    "\052\uffa0\057\uffa0\063\005\064\uffa0\065\uffa0\066\uffa0\001" +
    "\002\000\030\010\052\026\046\027\056\030\044\034\047" +
    "\051\042\052\054\057\031\064\050\065\025\066\060\001" +
    "\002\000\006\012\uffa0\063\005\001\002\000\004\012\255" +
    "\001\002\000\032\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\016\uffa0\020\uffa0\024\uffa0\025\uffa0\063\005" +
    "\065\uffa0\001\002\000\032\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\024\006\025\007" +
    "\063\005\065\uffa0\001\002\000\004\011\260\001\002\000" +
    "\044\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\061\ufff3\063\ufff3\065\ufff3\001\002\000\012" +
    "\004\262\015\uffdd\062\122\063\uffdd\001\002\000\032\010" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0\052\uffa0" +
    "\057\uffa0\063\005\064\uffa0\065\uffa0\066\uffa0\001\002\000" +
    "\030\010\052\026\046\027\056\030\044\034\047\051\042" +
    "\052\054\057\031\064\050\065\025\066\060\001\002\000" +
    "\044\032\072\033\077\034\074\035\075\036\065\037\064" +
    "\040\067\041\070\042\102\043\066\044\073\045\076\046" +
    "\100\047\063\050\101\062\uffa0\063\005\001\002\000\004" +
    "\062\266\001\002\000\032\010\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\034\uffa0\051\uffa0\052\uffa0\057\uffa0\063\005\064\uffa0" +
    "\065\uffa0\066\uffa0\001\002\000\030\010\052\026\046\027" +
    "\056\030\044\034\047\051\042\052\054\057\031\064\050" +
    "\065\025\066\060\001\002\000\046\012\uffa0\032\072\033" +
    "\077\034\074\035\075\036\065\037\064\040\067\041\070" +
    "\042\102\043\066\044\073\045\076\046\100\047\063\050" +
    "\101\062\272\063\uffa0\001\002\000\006\012\uffa0\063\005" +
    "\001\002\000\032\010\uffa0\026\uffa0\027\uffa0\030\uffa0\034" +
    "\uffa0\051\uffa0\052\uffa0\057\uffa0\063\005\064\uffa0\065\uffa0" +
    "\066\uffa0\001\002\000\006\012\uffe4\063\uffe4\001\002\000" +
    "\030\010\052\026\046\027\056\030\044\034\047\051\042" +
    "\052\054\057\031\064\050\065\025\066\060\001\002\000" +
    "\044\012\uffe5\032\072\033\077\034\074\035\075\036\065" +
    "\037\064\040\067\041\070\042\102\043\066\044\073\045" +
    "\076\046\100\047\063\050\101\063\uffe5\001\002\000\004" +
    "\012\277\001\002\000\032\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\024\uffa0\025\uffa0" +
    "\063\005\065\uffa0\001\002\000\032\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\024\006" +
    "\025\007\063\005\065\uffa0\001\002\000\004\011\302\001" +
    "\002\000\044\002\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\061\ufff4\063\ufff4\065\ufff4\001\002" +
    "\000\030\010\052\026\046\027\056\030\044\034\047\051" +
    "\042\052\054\057\031\064\050\065\025\066\060\001\002" +
    "\000\044\012\uffa0\032\072\033\077\034\074\035\075\036" +
    "\065\037\064\040\067\041\070\042\102\043\066\044\073" +
    "\045\076\046\100\047\063\050\101\063\005\001\002\000" +
    "\004\012\306\001\002\000\032\007\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\024\uffa0\025" +
    "\uffa0\063\005\065\uffa0\001\002\000\032\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\020\uffa0\024" +
    "\006\025\007\063\005\065\uffa0\001\002\000\004\011\311" +
    "\001\002\000\044\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\061\ufff7\063\ufff7\065\ufff7\001" +
    "\002\000\032\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\024\006\025\007\063\005\065" +
    "\uffa0\001\002\000\004\017\314\001\002\000\032\010\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\034\uffa0\051\uffa0\052\uffa0\057" +
    "\uffa0\063\005\064\uffa0\065\uffa0\066\uffa0\001\002\000\030" +
    "\010\052\026\046\027\056\030\044\034\047\051\042\052" +
    "\054\057\031\064\050\065\025\066\060\001\002\000\102" +
    "\002\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\032\072\033\077\034\074\035\075\036\065\037" +
    "\064\040\067\041\070\042\102\043\066\044\073\045\076" +
    "\046\100\047\063\050\101\061\ufff6\063\ufff6\065\ufff6\001" +
    "\002\000\004\002\001\001\002\000\040\002\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\022\uffa0\023\uffa0\061\216\063\uffa0\065\uffa0" +
    "\001\002\000\036\002\uffed\007\uffa0\010\uffa0\011\uffed\012" +
    "\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffed\020\uffa0\022\uffed" +
    "\023\uffed\063\005\065\uffa0\001\002\000\014\002\uffec\011" +
    "\uffec\017\uffec\022\uffec\023\uffec\001\002\000\044\002\uffa0" +
    "\010\052\011\uffa0\017\uffa0\022\uffa0\023\uffa0\026\046\027" +
    "\056\030\044\034\047\051\042\052\054\057\031\061\216" +
    "\064\050\065\025\066\060\001\002\000\014\002\uffef\011" +
    "\uffef\017\uffef\022\uffef\023\uffef\001\002\000\020\002\uffa0" +
    "\011\uffa0\017\uffa0\022\uffa0\023\uffa0\061\uffa0\063\005\001" +
    "\002\000\016\002\uffa0\011\uffa0\017\uffa0\022\uffa0\023\uffa0" +
    "\061\216\001\002\000\014\002\uffee\011\uffee\017\uffee\022" +
    "\uffee\023\uffee\001\002\000\014\002\000\011\000\017\000" +
    "\022\000\023\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\014\002\011\005\003\006\010\034\007\035" +
    "\012\001\001\000\004\006\327\001\001\000\002\001\001" +
    "\000\006\034\103\035\322\001\001\000\006\034\103\035" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\021\010\023\011\026\020\027\021" +
    "\017\001\001\000\006\034\103\035\311\001\001\000\006" +
    "\034\103\035\302\001\001\000\006\034\103\035\244\001" +
    "\001\000\004\007\236\001\001\000\002\001\001\000\006" +
    "\034\103\035\223\001\001\000\006\033\217\034\216\001" +
    "\001\000\006\034\103\035\171\001\001\000\006\034\103" +
    "\035\165\001\001\000\002\001\001\000\006\034\103\035" +
    "\162\001\001\000\006\034\103\035\156\001\001\000\006" +
    "\014\031\025\036\001\001\000\024\011\060\016\137\020" +
    "\056\021\050\022\042\025\054\026\141\027\135\032\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\060\016\131\020\056\021\050\022\042" +
    "\025\054\032\052\001\001\000\022\011\060\013\040\016" +
    "\044\020\056\021\050\022\042\025\054\032\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\070\034\103\035\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\103\035\104\001\001\000\020\011\060\016\061\020" +
    "\056\021\050\022\042\025\054\032\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\031\025\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\060\016\102\020\056\021" +
    "\050\022\042\025\054\032\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\070\001\001\000" +
    "\002\001\001\000\004\023\105\001\001\000\002\001\001" +
    "\000\006\012\110\024\112\001\001\000\006\034\103\035" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\114\005\003\006\010\034\007\035" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\103\035\122\001\001\000\004\012\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\103\035\126\001" +
    "\001\000\022\011\060\013\127\016\044\020\056\021\050" +
    "\022\042\025\054\032\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\070\001\001\000\002\001\001" +
    "\000\006\014\134\025\036\001\001\000\002\001\001\000" +
    "\004\030\152\001\001\000\020\011\060\016\146\020\056" +
    "\021\050\022\042\025\054\032\052\001\001\000\004\031" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\060\016\145\020" +
    "\056\021\050\022\042\025\054\032\052\001\001\000\004" +
    "\031\070\001\001\000\004\031\070\001\001\000\002\001" +
    "\001\000\020\011\060\016\151\020\056\021\050\022\042" +
    "\025\054\032\052\001\001\000\004\031\070\001\001\000" +
    "\024\011\060\016\137\020\056\021\050\022\042\025\054" +
    "\026\155\027\135\032\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\103\035\160\001\001\000\012\010\161\011\026\020" +
    "\027\021\050\001\001\000\002\001\001\000\014\002\163" +
    "\005\003\006\010\034\007\035\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\103" +
    "\035\167\001\001\000\022\011\060\013\170\016\044\020" +
    "\056\021\050\022\042\025\054\032\052\001\001\000\002" +
    "\001\001\000\020\011\060\016\172\020\056\021\050\022" +
    "\042\025\054\032\052\001\001\000\010\031\070\034\103" +
    "\035\173\001\001\000\002\001\001\000\006\034\103\035" +
    "\175\001\001\000\014\002\176\005\003\006\010\034\007" +
    "\035\012\001\001\000\006\003\201\034\202\001\001\000" +
    "\006\034\103\035\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\060\016\205\020\056\021\050\022\042\025\054\032\052" +
    "\001\001\000\004\031\070\001\001\000\002\001\001\000" +
    "\006\034\103\035\210\001\001\000\014\002\211\005\003" +
    "\006\010\034\007\035\012\001\001\000\006\003\212\034" +
    "\202\001\001\000\002\001\001\000\014\002\214\005\003" +
    "\006\010\034\007\035\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\103\035\220" +
    "\001\001\000\010\005\221\034\103\035\012\001\001\000" +
    "\002\001\001\000\004\022\232\001\001\000\004\012\224" +
    "\001\001\000\006\015\225\034\227\001\001\000\002\001" +
    "\001\000\006\034\103\035\230\001\001\000\002\001\001" +
    "\000\022\011\060\013\231\016\044\020\056\021\050\022" +
    "\042\025\054\032\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\243\001" +
    "\001\000\002\001\001\000\004\012\246\001\001\000\006" +
    "\034\103\035\260\001\001\000\006\034\103\035\247\001" +
    "\001\000\002\001\001\000\006\034\103\035\251\001\001" +
    "\000\022\011\060\013\252\016\044\020\056\021\050\022" +
    "\042\025\054\032\052\001\001\000\006\034\103\035\253" +
    "\001\001\000\002\001\001\000\006\034\103\035\255\001" +
    "\001\000\014\002\256\005\003\006\010\034\007\035\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\103\035\262\001\001\000\020\011\060" +
    "\016\263\020\056\021\050\022\042\025\054\032\052\001" +
    "\001\000\010\031\070\034\103\035\264\001\001\000\002" +
    "\001\001\000\006\034\103\035\266\001\001\000\020\011" +
    "\060\016\267\020\056\021\050\022\042\025\054\032\052" +
    "\001\001\000\010\017\270\031\070\034\272\001\001\000" +
    "\006\034\103\035\275\001\001\000\006\034\103\035\273" +
    "\001\001\000\002\001\001\000\020\011\060\016\274\020" +
    "\056\021\050\022\042\025\054\032\052\001\001\000\004" +
    "\031\070\001\001\000\002\001\001\000\006\034\103\035" +
    "\277\001\001\000\014\002\300\005\003\006\010\034\007" +
    "\035\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\060\016\303\020\056\021\050\022\042\025\054" +
    "\032\052\001\001\000\010\031\070\034\103\035\304\001" +
    "\001\000\002\001\001\000\006\034\103\035\306\001\001" +
    "\000\014\002\307\005\003\006\010\034\007\035\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\312" +
    "\005\003\006\010\034\007\035\012\001\001\000\002\001" +
    "\001\000\006\034\103\035\314\001\001\000\020\011\060" +
    "\016\315\020\056\021\050\022\042\025\054\032\052\001" +
    "\001\000\004\031\070\001\001\000\002\001\001\000\006" +
    "\033\320\034\216\001\001\000\010\005\321\034\103\035" +
    "\012\001\001\000\002\001\001\000\026\011\060\013\324" +
    "\016\044\020\056\021\050\022\042\025\054\032\052\033" +
    "\323\034\216\001\001\000\002\001\001\000\006\034\103" +
    "\035\325\001\001\000\006\033\326\034\216\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex) {
  		
      super(lex);
      lexer = lex;
     
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.print(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // optws ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optws",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // optws ::= WS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optws",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // optsemi ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // optsemi ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // optasm ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // optasm ::= ASM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasm",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unop ::= LENGTH 
            {
              Integer RESULT =null;
		 RESULT = Op.LEN; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unop ::= NOT 
            {
              Integer RESULT =null;
		 RESULT = Op.NOT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Op.UNM; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop ::= OR 
            {
              Integer RESULT =null;
		 RESULT = Op.OR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop ::= AND 
            {
              Integer RESULT =null;
		 RESULT = Op.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binop ::= GR 
            {
              Integer RESULT =null;
		 RESULT = Op.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binop ::= LE 
            {
              Integer RESULT =null;
		 RESULT = Op.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.NEQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = Op.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = Op.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binop ::= CONCAT 
            {
              Integer RESULT =null;
		 RESULT = Op.CONCAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binop ::= POW 
            {
              Integer RESULT =null;
		 RESULT = Op.POW; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Op.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Op.DIV; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Op.MUL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Op.SUB; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = Op.ADD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fieldsep ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fieldsep ::= COM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // field ::= exp 
            {
              Field RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldExp(e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // field ::= ID ASM exp 
            {
              Field RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldNameExp(ident,e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // field ::= LBRACK exp RBRACK ASM exp 
            {
              Field RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = new FieldLRExp(e1,e2);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fieldlist ::= field fieldsep fieldlist 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fl==null) {
									RESULT = new FieldList(f);
								}
								else
								{
									fl.insertElementAt(f,0);
									RESULT = fl;
								}						
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fieldlist ::= field 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldList(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tableconstructor ::= LCURL RCURL 
            {
              TableConstructor RESULT =null;
		 RESULT = new TableConstructor(new FieldList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tableconstructor ::= LCURL fieldlist RCURL 
            {
              TableConstructor RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TableConstructor(fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parlist ::= 
            {
              ParList RESULT =null;
		
							RESULT = new ParList(null, false);
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parlist ::= PARAMS 
            {
              ParList RESULT =null;
		
							RESULT = new ParList(null,true);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parlist ::= namelist COM PARAMS 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
							RESULT = new ParList(nl,true);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parlist ::= namelist 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new ParList(nl,false);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              FuncBody RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParList pl = (ParList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
								RESULT = new FuncBody(pl,bl);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function ::= FUNC optws funcbody 
            {
              Function RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new Function(fb);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= TEXT 
            {
              ExpList RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(new TextExp(txt)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args ::= tableconstructor 
            {
              ExpList RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpList(new TableConstructorExp(tc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // args ::= LPAREN RPAREN 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // args ::= LPAREN explist RPAREN 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							RESULT = el;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // functioncall ::= prefixexp DDOT TEXT args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int namleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new FuncCallSelf(pexp,new Name(nam),ar);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // functioncall ::= prefixexp args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside functioncall");
							RESULT = new FuncCall(pexp,ar);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // prefixexp ::= functioncall 
            {
              PrefixExp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							System.out.println("inside prefixexp");
							RESULT =  new PrefixExpFuncCall(fc);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prefixexp ::= var 
            {
              PrefixExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = new PrefixExpVar(v);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= function 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionExp(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= unop exp 
            {
              Exp RESULT =null;
		int uopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer uop = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Unop(uop,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp binop exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Binop(e1,op,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= tableconstructor 
            {
              Exp RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TableConstructorExp(tc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= prefixexp 
            {
              Exp RESULT =null;
		int prefixexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prefixexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrefixExp prefixexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PreExp(prefixexp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= TEXT 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TextExp(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= NUMBER 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 					   
								RESULT = new NumberExp(num); 						
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new BooleanExp(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new BooleanExp(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new Nil(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= prefixexp LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  						
						RESULT =  new VarTabIndex(pe,e);						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  						
						RESULT =  new Variable(id);						
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // namelist ::= ID optws COM optws namelist 
            {
              NameList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	if(nl== null){					    		
					    	nl =new NameList(new Name(id));
							RESULT = nl;}
							else{		
							nl.insertElementAt(new Name(id),0);
							RESULT = nl;
							} 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // namelist ::= ID optws 
            {
              NameList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NameList(new Name(id)); 
						System.out.println("Inside Namelist"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optasmexplist ::= empty 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasmexplist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optasmexplist ::= ASM optws explist 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasmexplist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // explist ::= exp optws COM optws explist 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if(el == null) {
									el = new ExpList(e);
								RESULT = el;} 
								else {
									el.insertElementAt(e,0);
								RESULT = el;}
	
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // explist ::= exp optws 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
							RESULT= new ExpList(e);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varlist ::= var optws COM optws varlist 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						if(vl==null){
						vl = new VarList(v);
						RESULT = vl; }
						else {
						vl.insertElementAt(v,0);
						RESULT = vl; }
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varlist ::= var optws 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 							
						RESULT= new VarList(v);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // optforexp ::= empty 
            {
              Exp RESULT =null;
		 RESULT = new NumberExp(1.0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optforexp ::= COM optws exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optelse ::= empty 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // optelse ::= ELSEIF WS exp WS THEN optws block optelse 
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elseblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block elseblock = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Block tmpbl =new Block(new StatList(new IfThenElse(e,bl,elseblock)),null);
						RESULT = tmpbl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // optelse ::= ELSE optws block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcname ::= DDOT ID 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcname ::= ID DOT funcname 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcname ::= ID 
            {
              FuncName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // laststat ::= BREAK optws optsemi statlist 
            {
              LastStat RESULT =null;
		 RESULT = new LastBreak(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // laststat ::= BREAK optws optsemi 
            {
              LastStat RESULT =null;
		 RESULT = new LastBreak(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // laststat ::= RETURN optws explist optws optsemi 
            {
              LastStat RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    
							System.out.println("Inside laststat");
							RESULT = new LastReturn(el); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // laststat ::= RETURN optws optsemi 
            {
              LastStat RESULT =null;
		    
							System.out.println("Inside laststat");
							RESULT = new LastReturn(null); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL optws namelist optasmexplist 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LocalDecl(nl,el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= LOCAL FUNC function ID funcbody 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FUNC funcname funcbody 
            {
              Stat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= FOR optws namelist optws IN optws explist optws DO optws block END 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForIn(nl,el, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= FOR optws ID optws ASM optws exp optws COM optws exp optforexp optws DO optws block END 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		
								RESULT = new ForExp(id,e1,e2,e3,b); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= IF optws exp optws THEN optws block optelse END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseblockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseblockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block elseblock = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
							RESULT = new IfThenElse(e, b, elseblock);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= REPEAT optws block UNTIL optws exp 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 		RESULT = new RepeatUntil(b,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= WHILE optws exp optws DO optws block END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		RESULT = new WhileExp(e,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= DO optws block END 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    
								System.out.println("Inside DO END");
								RESULT = new DoExp(b); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= functioncall 
            {
              Stat RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						  RESULT = new FuncCallStmt(fc);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= varlist optws ASM optws explist 
            {
              Stat RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
								System.out.println("Inside stat");
								RESULT = new Asm(vl,el);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statlist ::= optws stat optsemi optws statlist 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
								
					   		if(sl== null){
					    	System.out.println("Inside recu stat"); 	
					    	sl =new StatList(s);
							RESULT = sl;}
							else{
							System.out.println("Inside recu stat");
							sl.insertElementAt(s,0);
							RESULT = sl;
							}
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statlist ::= optws stat optsemi optws 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 	
							System.out.println("Inside single stat"); 			
							RESULT = new StatList(s);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= empty 
            {
              Block RESULT =null;
		 
                 				System.out.println("Inside empty block"); RESULT = new Block(null,null);;
                 				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= laststat 
            {
              Block RESULT =null;
		int lstatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LastStat lstat = (LastStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 		 		RESULT = new Block(null,lstat);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= statlist 
            {
              Block RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList stats = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		       
                 			System.out.println("Inside block with laststat");     	    
                 			RESULT = new Block(stats,null); 	
                 			  
                 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // block ::= statlist laststat 
            {
              Block RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList stats = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LastStat lstat = (LastStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		       
                 			   
                 			 System.out.println("Inside block with laststat");    
                 			RESULT = new Block(stats,lstat);  
                 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

