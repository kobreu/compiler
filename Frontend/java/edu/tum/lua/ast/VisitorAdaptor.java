/*
 * Generated by classgen, version 1.5
 * 26.07.13 16:53
 */
package edu.tum.lua.ast;

public abstract class VisitorAdaptor implements Visitor {

  public void visit(Op op) { visit(); }
  public void visit(StatList statList) { visit(); }
  public void visit(VarList varList) { visit(); }
  public void visit(NameList nameList) { visit(); }
  public void visit(ExpList expList) { visit(); }
  public void visit(FieldList fieldList) { visit(); }
  public void visit(Block block) { visit(); }
  public void visit(Name name) { visit(); }
  public void visit(Function function) { visit(); }
  public void visit(FuncBody funcBody) { visit(); }
  public void visit(ParList parList) { visit(); }
  public void visit(TableConstructor tableConstructor) { visit(); }
  public void visit(LastStat lastStat) { visit(); }
  public void visit(LastReturn lastReturn) { visit(); }
  public void visit(LastBreak lastBreak) { visit(); }
  public void visit(Stat stat) { visit(); }
  public void visit(Asm asm) { visit(); }
  public void visit(FuncCallStmt funcCallStmt) { visit(); }
  public void visit(DoExp doExp) { visit(); }
  public void visit(WhileExp whileExp) { visit(); }
  public void visit(RepeatUntil repeatUntil) { visit(); }
  public void visit(IfThenElse ifThenElse) { visit(); }
  public void visit(ForExp forExp) { visit(); }
  public void visit(ForIn forIn) { visit(); }
  public void visit(FunctionDef functionDef) { visit(); }
  public void visit(LocalFuncDef localFuncDef) { visit(); }
  public void visit(LocalDecl localDecl) { visit(); }
  public void visit(Exp exp) { visit(); }
  public void visit(Nil nil) { visit(); }
  public void visit(BooleanExp booleanExp) { visit(); }
  public void visit(NumberExp numberExp) { visit(); }
  public void visit(TextExp textExp) { visit(); }
  public void visit(Dots dots) { visit(); }
  public void visit(Closure closure) { visit(); }
  public void visit(PreExp preExp) { visit(); }
  public void visit(TableConstructorExp tableConstructorExp) { visit(); }
  public void visit(Binop binop) { visit(); }
  public void visit(Unop unop) { visit(); }
  public void visit(FunctionExp functionExp) { visit(); }
  public void visit(Var var) { visit(); }
  public void visit(Variable variable) { visit(); }
  public void visit(VarTabIndex varTabIndex) { visit(); }
  public void visit(PrefixExp prefixExp) { visit(); }
  public void visit(PrefixExpVar prefixExpVar) { visit(); }
  public void visit(PrefixExpFuncCall prefixExpFuncCall) { visit(); }
  public void visit(PrefixExpExp prefixExpExp) { visit(); }
  public void visit(FunctionCall functionCall) { visit(); }
  public void visit(FuncCall funcCall) { visit(); }
  public void visit(FuncCallSelf funcCallSelf) { visit(); }
  public void visit(FuncName funcName) { visit(); }
  public void visit(FuncNameVar funcNameVar) { visit(); }
  public void visit(FuncNameVarDotFuncName funcNameVarDotFuncName) { visit(); }
  public void visit(FuncNameDDotVar funcNameDDotVar) { visit(); }
  public void visit(Field field) { visit(); }
  public void visit(FieldLRExp fieldLRExp) { visit(); }
  public void visit(FieldNameExp fieldNameExp) { visit(); }
  public void visit(FieldExp fieldExp) { visit(); }

  public void visit() { }

}
