/*
 * Generated by classgen, version 1.5
 * 31.07.13 15:50
 */
package edu.tum.lua.ast;

public abstract class VisitorAdaptor implements Visitor {

	@Override
	public void visit(Op op) {
		visit();
	}

	@Override
	public void visit(StatList statList) {
		visit();
	}

	@Override
	public void visit(VarList varList) {
		visit();
	}

	@Override
	public void visit(NameList nameList) {
		visit();
	}

	@Override
	public void visit(ExpList expList) {
		visit();
	}

	@Override
	public void visit(FieldList fieldList) {
		visit();
	}

	@Override
	public void visit(Block block) {
		visit();
	}

	@Override
	public void visit(Name name) {
		visit();
	}

	@Override
	public void visit(TableConstructor tableConstructor) {
		visit();
	}

	@Override
	public void visit(LastStat lastStat) {
		visit();
	}

	@Override
	public void visit(LastReturn lastReturn) {
		visit();
	}

	@Override
	public void visit(LastBreak lastBreak) {
		visit();
	}

	@Override
	public void visit(Stat stat) {
		visit();
	}

	@Override
	public void visit(Asm asm) {
		visit();
	}

	@Override
	public void visit(FuncCallStmt funcCallStmt) {
		visit();
	}

	@Override
	public void visit(DoExp doExp) {
		visit();
	}

	@Override
	public void visit(WhileExp whileExp) {
		visit();
	}

	@Override
	public void visit(RepeatUntil repeatUntil) {
		visit();
	}

	@Override
	public void visit(IfThenElse ifThenElse) {
		visit();
	}

	@Override
	public void visit(ForExp forExp) {
		visit();
	}

	@Override
	public void visit(ForIn forIn) {
		visit();
	}

	@Override
	public void visit(LocalFuncDef localFuncDef) {
		visit();
	}

	@Override
	public void visit(LocalDecl localDecl) {
		visit();
	}

	@Override
	public void visit(Exp exp) {
		visit();
	}

	@Override
	public void visit(Nil nil) {
		visit();
	}

	@Override
	public void visit(BooleanExp booleanExp) {
		visit();
	}

	@Override
	public void visit(NumberExp numberExp) {
		visit();
	}

	@Override
	public void visit(TextExp textExp) {
		visit();
	}

	@Override
	public void visit(Dots dots) {
		visit();
	}

	@Override
	public void visit(PreExp preExp) {
		visit();
	}

	@Override
	public void visit(TableConstructorExp tableConstructorExp) {
		visit();
	}

	@Override
	public void visit(Binop binop) {
		visit();
	}

	@Override
	public void visit(Unop unop) {
		visit();
	}

	@Override
	public void visit(FunctionExp functionExp) {
		visit();
	}

	@Override
	public void visit(Var var) {
		visit();
	}

	@Override
	public void visit(Variable variable) {
		visit();
	}

	@Override
	public void visit(VarTabIndex varTabIndex) {
		visit();
	}

	@Override
	public void visit(PrefixExp prefixExp) {
		visit();
	}

	@Override
	public void visit(PrefixExpVar prefixExpVar) {
		visit();
	}

	@Override
	public void visit(PrefixExpFuncCall prefixExpFuncCall) {
		visit();
	}

	@Override
	public void visit(PrefixExpExp prefixExpExp) {
		visit();
	}

	@Override
	public void visit(FunctionCall functionCall) {
		visit();
	}

	@Override
	public void visit(FuncCall funcCall) {
		visit();
	}

	@Override
	public void visit(FuncCallSelf funcCallSelf) {
		visit();
	}

	@Override
	public void visit(FuncName funcName) {
		visit();
	}

	@Override
	public void visit(FuncNameVar funcNameVar) {
		visit();
	}

	@Override
	public void visit(FuncNameVarDotFuncName funcNameVarDotFuncName) {
		visit();
	}

	@Override
	public void visit(FuncNameDDotVar funcNameDDotVar) {
		visit();
	}

	@Override
	public void visit(Field field) {
		visit();
	}

	@Override
	public void visit(FieldLRExp fieldLRExp) {
		visit();
	}

	@Override
	public void visit(FieldNameExp fieldNameExp) {
		visit();
	}

	@Override
	public void visit(FieldExp fieldExp) {
		visit();
	}

	public void visit() {
	}

}
