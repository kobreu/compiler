/*
 * Generated by classgen, version 1.5
 * 26.07.13 10:01
 */
package edu.tum.lua.ast;

public class FuncBody implements SyntaxNode {

  private SyntaxNode parent;
  public ParList parlist;
  public Block block;

  public FuncBody (ParList parlist, Block block) {
    this.parlist = parlist;
    if (parlist != null) parlist.setParent(this);
    this.block = block;
    if (block != null) block.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (parlist != null) parlist.accept(visitor);
    if (block != null) block.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (parlist != null) parlist.traverseTopDown(visitor);
    if (block != null) block.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (parlist != null) parlist.traverseBottomUp(visitor);
    if (block != null) block.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("FuncBody(\n");
      if (parlist != null)
        buffer.append(parlist.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (block != null)
        buffer.append(block.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [FuncBody]");
    return buffer.toString();
  }
}
