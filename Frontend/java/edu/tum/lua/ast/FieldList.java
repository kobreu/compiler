/*
 * Generated by classgen, version 1.5
 * 31.07.13 15:50
 */
package edu.tum.lua.ast;

import java.util.Enumeration;
import java.util.Vector;

public class FieldList extends SyntaxNode {

	private final Vector<Field> items;
	private SyntaxNode parent;

	public FieldList() {
		items = new Vector<>();
	}

	public FieldList(Field anItem) {
		this();
		append(anItem);
	}

	public FieldList append(Field anItem) {
		if (anItem == null)
			return this;
		anItem.setParent(this);
		items.addElement(anItem);
		return this;
	}

	public Enumeration<Field> elements() {
		return items.elements();
	}

	public Field elementAt(int index) {
		return items.elementAt(index);
	}

	public void setElementAt(Field item, int index) {
		item.setParent(this);
		items.setElementAt(item, index);
	}

	public void insertElementAt(Field item, int index) {
		item.setParent(this);
		items.insertElementAt(item, index);
	}

	public void removeElementAt(int index) {
		items.removeElementAt(index);
	}

	public int size() {
		return items.size();
	}

	public boolean isEmpty() {
		return items.isEmpty();
	}

	public boolean contains(Field item) {
		int size = items.size();
		for (int i = 0; i < size; i++)
			if (item.equals(items.elementAt(i)))
				return true;
		return false;
	}

	public int indexOf(Field item) {
		return items.indexOf(item);
	}

	@Override
	public String toString() {
		return toString("");
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("FieldList (\n");
		int size = items.size();
		for (int i = 0; i < size; i++) {
			buffer.append(items.elementAt(i).toString("  " + tab));
			buffer.append("\n");
		}
		buffer.append(tab);
		buffer.append(") [FieldList]");
		return buffer.toString();
	}

	@Override
	public SyntaxNode getParent() {
		return parent;
	}

	@Override
	public void setParent(SyntaxNode parent) {
		this.parent = parent;
	}

	@Override
	public void accept(Visitor visitor) {
		visitor.visit(this);
	}

	@Override
	public void childrenAccept(Visitor visitor) {
		for (int i = 0; i < size(); i++)
			if (elementAt(i) != null)
				elementAt(i).accept(visitor);
	}

	@Override
	public void traverseTopDown(Visitor visitor) {
		this.accept(visitor);
		for (int i = 0; i < size(); i++)
			if (elementAt(i) != null)
				elementAt(i).traverseTopDown(visitor);
	}

	@Override
	public void traverseBottomUp(Visitor visitor) {
		for (int i = 0; i < size(); i++)
			if (elementAt(i) != null)
				elementAt(i).traverseBottomUp(visitor);
		this.accept(visitor);
	}

}
