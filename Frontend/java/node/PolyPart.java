/*
 * Generated by classgen, version 1.5
 * 30.05.13 19:22
 */
package node;

public class PolyPart implements SyntaxNode {

  private SyntaxNode parent;
  public Term head;
  public PolyPart tail;

  public PolyPart (Term head, PolyPart tail) {
    this.head = head;
    if (head != null) head.setParent(this);
    this.tail = tail;
    if (tail != null) tail.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (head != null) head.accept(visitor);
    if (tail != null) tail.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (head != null) head.traverseTopDown(visitor);
    if (tail != null) tail.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (head != null) head.traverseBottomUp(visitor);
    if (tail != null) tail.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("PolyPart(\n");
      if (head != null)
        buffer.append(head.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (tail != null)
        buffer.append(tail.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [PolyPart]");
    return buffer.toString();
  }
}
