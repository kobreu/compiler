/*
 * Generated by classgen, version 1.5
 * 30.05.13 19:22
 */
package node;

public class Term implements SyntaxNode {

  private SyntaxNode parent;
  public int number;
  public String var;
  public int exp;
  public ExpSeq expr;

  public Term (int number, String var, int exp, ExpSeq expr) {
    this.number = number;
    this.var = var;
    this.exp = exp;
    this.expr = expr;
    if (expr != null) expr.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (expr != null) expr.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (expr != null) expr.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (expr != null) expr.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Term(\n");
    buffer.append("  "+tab+number);
    buffer.append("\n");
    buffer.append("  "+tab+var);
    buffer.append("\n");
    buffer.append("  "+tab+exp);
    buffer.append("\n");
      if (expr != null)
        buffer.append(expr.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Term]");
    return buffer.toString();
  }
}
