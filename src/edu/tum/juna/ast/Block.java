/*
 * Generated by classgen, version 1.5
 * 31.07.13 15:50
 */
package edu.tum.juna.ast;

public class Block extends SyntaxNode {

	private SyntaxNode parent;
	public StatList stats;
	public LastStat last;

	public Block(StatList stats, LastStat last) {
		this.stats = stats;
		if (stats != null)
			stats.setParent(this);
		this.last = last;
		if (last != null)
			last.setParent(this);
	}

	@Override
	public SyntaxNode getParent() {
		return parent;
	}

	@Override
	public void setParent(SyntaxNode parent) {
		this.parent = parent;
	}

	@Override
	public void accept(Visitor visitor) {
		visitor.visit(this);
	}

	@Override
	public void childrenAccept(Visitor visitor) {
		if (stats != null)
			stats.accept(visitor);
		if (last != null)
			last.accept(visitor);
	}

	@Override
	public void traverseTopDown(Visitor visitor) {
		accept(visitor);
		if (stats != null)
			stats.traverseTopDown(visitor);
		if (last != null)
			last.traverseTopDown(visitor);
	}

	@Override
	public void traverseBottomUp(Visitor visitor) {
		if (stats != null)
			stats.traverseBottomUp(visitor);
		if (last != null)
			last.traverseBottomUp(visitor);
		accept(visitor);
	}

	@Override
	public String toString() {
		return toString("");
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("Block(\n");
		if (stats != null)
			buffer.append(stats.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		if (last != null)
			buffer.append(last.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [Block]");
		return buffer.toString();
	}
}
